// BSLLS:LatinAndCyrillicSymbolInWord-off

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаполнитьПараметрыПоУмолчанию();
			
	ДеревоОбъектовМетаданныхЗаполнить();
	
	Если РодительскиеПодсистемы.Количество() > 0 Тогда
		Элементы.ДеревоОбъектовМетаданных.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
	
	НачальнаяПометкаКоллекций(ДеревоОбъектовМетаданных);
	
	ОбновитьВидимостьДоступность(ЭтотОбъект);
	
	Элементы.ДекорацияШаг2.Доступность = Ложь;
	Элементы.ДекорацияШаг3.Доступность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// Устанавливаем начальное значение выбора.
	Если ИдентификаторТекущейСтрокиПриОткрытии > 0 Тогда
		
		Элементы.ДеревоОбъектовМетаданных.ТекущаяСтрока = ИдентификаторТекущейСтрокиПриОткрытии;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ФормироватьРеквизитныйСоставОбъектовПриИзменении(Элемент)

	ОбновитьВидимостьДоступность(ЭтаФорма);
	Если НЕ ФормироватьРеквизитныйСоставОбъектов Тогда
		ФормироватьДетальныеОтношенияНаУровнеРеквизитов = Ложь;
		ВыводитьПредопределенныеРеквизиты = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг2ОбработкаНавигационнойСсылки(
	Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, 
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "GenerateCode" Тогда
		СгенерироватьКодНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг3ОбработкаНавигационнойСсылки(
	Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, 
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "GenerateScheme" Тогда 
		СгенерироватьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъектовМетаданных

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)

	ПометкаПроверка = 2;

	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = ПометкаПроверка Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	ПометитьВложенныеЭлементы(ТекущиеДанные);
	ПометитьЭлементыРодителей(ТекущиеДанные);
	
	ПервыйЭлемент = ДеревоОбъектовМетаданных.ПолучитьЭлементы().Получить(0);
	
	Элементы.ДекорацияШаг2.Доступность = ПервыйЭлемент.Пометка > 0;
	Элементы.ДекорацияШаг3.Доступность = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сгенерировать(Команда)
	СгенерироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьПоПодсистемам(Команда)
		
	Оповещение = Новый ОписаниеОповещения("ОповещениеОЗавершенииОтбора", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму("ВнешняяОбработка.ДиаграммаОбъектов1С.Форма.ОтборПоПодсистемам", ПараметрыФормы, ЭтотОбъект, 
		УникальныйИдентификатор, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

#КонецОбласти  

#Область УправлениеВидимостью

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьДоступность(Форма)
	
	ЭлементыФормы = Форма.Элементы;
	ЭлементыФормы.ФормироватьДетальныеОтношенияНаУровнеРеквизитов.Доступность = Форма.ФормироватьРеквизитныйСоставОбъектов;
	ЭлементыФормы.ВыводитьПредопределенныеРеквизиты.Доступность = Форма.ФормироватьРеквизитныйСоставОбъектов;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФунции

// Проверка того, что переданный тип является ссылочным типом данных.
// Для типа "Неопределено" возвращается Ложь.
// Параметры:
//  Тип - Неопределено 
// Возвращаемое значение:
//  Булево.
//  
&НаСервереБезКонтекста
Функция ЭтоСсылка(Тип)
	
	Если Тип = Тип("Строка")
		ИЛИ Тип = Тип("Число")
      	ИЛИ Тип = Тип("Булево")
		ИЛИ Тип = Тип("Дата")
		ИЛИ Тип = Тип("ОписаниеТипов")
		ИЛИ Тип = Тип("ВидДвиженияНакопления") Тогда
		Возврат Ложь;
	КонецЕсли;		
	
	Возврат Тип <> Тип("Неопределено") 
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыПоУмолчанию()

	ЗаполнитьИсходникБиблиотекиПоУмолчанию();
	ЗаполнитьНастройкиПоУмолчанию(); 
	ЗаполнитьСписокОбъектовМетаданныхПоУмолчанию();  

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсходникБиблиотекиПоУмолчанию()   
	
	ИсходныйКодПодключаемойБиблиотеки =
	    "'>>> библиотека 1ce-icons-for-plantuml (ext)
		|!define v8_PUML https://raw.githubusercontent.com/plastinin/1ce-icons-for-plantuml/extended/dist/
		|!include v8_PUML/common.puml
	    |!include v8_PUML/v8_AccRg.puml
		|!include v8_PUML/v8_Document.puml
		|!include v8_PUML/v8_Catalog.puml
		|!include v8_PUML/v8_InfoRg.puml
		|!include v8_PUML/v8_ChartsOfCharacteristicTypes.puml
		|!include v8_PUML/v8_DefinedTypes.puml
		|!include v8_PUML/v8_Enum.puml
		|'<<<
		|";
	
	ИсходныйКод = ИсходныйКодПодключаемойБиблиотеки;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПоУмолчанию()    
	
	ПараметрыПоУмолчанию = ПараметрыПоУмолчанию();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОбъектовМетаданныхПоУмолчанию()
	
	Если КоллекцияВыбираемыхОбъектовМетаданных.Количество() Тогда
		КоллекцияВыбираемыхОбъектовМетаданных.Очистить(); 
	КонецЕсли;
	
	КоллекцияВыбираемыхОбъектовМетаданных.Добавить("Справочники");
	КоллекцияВыбираемыхОбъектовМетаданных.Добавить("ПланыВидовХарактеристик");
	КоллекцияВыбираемыхОбъектовМетаданных.Добавить("Документы");
	КоллекцияВыбираемыхОбъектовМетаданных.Добавить("РегистрыНакопления");
	КоллекцияВыбираемыхОбъектовМетаданных.Добавить("РегистрыСведений");
	КоллекцияВыбираемыхОбъектовМетаданных.Добавить("Перечисления");  
	КоллекцияВыбираемыхОбъектовМетаданных.Добавить("ОпределяемыеТипы");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодсистем(СписокПодсистем) 
	Для Каждого Подсистема Из СписокПодсистем Цикл
		Если Подсистема.ВключатьВКомандныйИнтерфейс Тогда
			ЭлементыПодсистемСКоманднымИнтерфейсом.Добавить(Подсистема.ПолноеИмя());
		КонецЕсли;	
		
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			ЗаполнитьСписокПодсистем(Подсистема.Подсистемы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет дерево значений объектов конфигурации.
// Если список значений "Параметры.КоллекцииВыбираемыхОбъектовМетаданных" не пуст, тогда
// дерево будет ограничено переданным списком коллекций объектов метаданных.
//  Если объекты метаданных в сформированном дереве будут найдены в списке значений
// "Параметры.ВыбранныеОбъектыМетаданных", тогда они будут помечены, как выбранные.
//
&НаСервере
Процедура ДеревоОбъектовМетаданныхЗаполнить()
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ЭтоКоллекцияОбщие");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ПолноеИмя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Родитель");
	
	КоллекцииОбъектовМетаданных_НоваяСтрока("Подсистемы",                   НСтр("ru = 'Подсистемы'"),                     35, 36, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеМодули",                  НСтр("ru = 'Общие модули'"),                   37, 38, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПараметрыСеанса",              НСтр("ru = 'Параметры сеанса'"),               39, 40, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Роли",                         НСтр("ru = 'Роли'"),                           41, 42, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыОбмена",                  НСтр("ru = 'Планы обмена'"),                   43, 44, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("КритерииОтбора",               НСтр("ru = 'Критерии отбора'"),                45, 46, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПодпискиНаСобытия",            НСтр("ru = 'Подписки на события'"),            47, 48, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегламентныеЗадания",          НСтр("ru = 'Регламентные задания'"),           49, 50, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ФункциональныеОпции",          НСтр("ru = 'Функциональные опции'"),           51, 52, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПараметрыФункциональныхОпций", НСтр("ru = 'Параметры функциональных опций'"), 53, 54, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ХранилищаНастроек",            НСтр("ru = 'Хранилища настроек'"),             55, 56, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеФормы",                   НСтр("ru = 'Общие формы'"),                    57, 58, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеКоманды",                 НСтр("ru = 'Общие команды'"),                  59, 60, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ГруппыКоманд",                 НСтр("ru = 'Группы команд'"),                  61, 62, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Интерфейсы",                   НСтр("ru = 'Интерфейсы'"),                     63, 64, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеМакеты",                  НСтр("ru = 'Общие макеты'"),                   65, 66, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеКартинки",                НСтр("ru = 'Общие картинки'"),                 67, 68, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПакетыXDTO",                   НСтр("ru = 'XDTO-пакеты'"),                    69, 70, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("WebСервисы",                   НСтр("ru = 'Web-сервисы'"),                    71, 72, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("WSСсылки",                     НСтр("ru = 'WS-ссылки'"),                      73, 74, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Стили",                        НСтр("ru = 'Стили'"),                          75, 76, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Языки",                        НСтр("ru = 'Языки'"),                          77, 78, Истина, КоллекцииОбъектовМетаданных);
	
	КоллекцииОбъектовМетаданных_НоваяСтрока("Константы",                    НСтр("ru = 'Константы'"),                      БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Справочники",                  НСтр("ru = 'Справочники'"),                    БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Документы",                    НСтр("ru = 'Документы'"),                      БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ЖурналыДокументов",            НСтр("ru = 'Журналы документов'"),             БиблиотекаКартинок.ЖурналДокументов,       БиблиотекаКартинок.ЖурналДокументов,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Перечисления",                 НСтр("ru = 'Перечисления'"),                   БиблиотекаКартинок.Перечисление,           БиблиотекаКартинок.Перечисление,                 Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Отчеты",                       НСтр("ru = 'Отчеты'"),                         БиблиотекаКартинок.Отчет,                  БиблиотекаКартинок.Отчет,                        Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Обработки",                    НСтр("ru = 'Обработки'"),                      БиблиотекаКартинок.Обработка,              БиблиотекаКартинок.Обработка,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовХарактеристик",      НСтр("ru = 'Планы видов характеристик'"),      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыСчетов",                  НСтр("ru = 'Планы счетов'"),                   БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовРасчета",            НСтр("ru = 'Планы видов характеристик'"),      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыСведений",             НСтр("ru = 'Регистры сведений'"),              БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыНакопления",           НСтр("ru = 'Регистры накопления'"),            БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыБухгалтерии",          НСтр("ru = 'Регистры бухгалтерии'"),           БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыРасчета",              НСтр("ru = 'Регистры расчета'"),               БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("БизнесПроцессы",               НСтр("ru = 'Бизнес-процессы'"),                БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Задачи",                       НСтр("ru = 'Задачи'"),                         БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 Ложь, КоллекцииОбъектовМетаданных);
		
	// Создание предопределенных элементов.
	ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя = Метаданные.Имя;
	ПараметрыЭлемента.Синоним = Метаданные.Синоним;
	ПараметрыЭлемента.Картинка = 79;
	ПараметрыЭлемента.Родитель = ДеревоОбъектовМетаданных;
	ЭлементКонфигурация = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя = "Общие";
	ПараметрыЭлемента.Синоним = "Общие";
	ПараметрыЭлемента.Картинка = 0;
	ПараметрыЭлемента.Родитель = ЭлементКонфигурация;
	ЭлементОбщие = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	// Заполнение дерева объектов метаданных.
	Для Каждого Строка Из КоллекцииОбъектовМетаданных Цикл
		Если КоллекцияВыбираемыхОбъектовМетаданных.Количество() = 0
			Или КоллекцияВыбираемыхОбъектовМетаданных.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			Строка.Родитель = ?(Строка.ЭтоКоллекцияОбщие, ЭлементОбщие, ЭлементКонфигурация);
			ДобавитьЭлементДереваОбъектовМетаданных(Строка, ?(Строка.Имя = "Подсистемы", Метаданные.Подсистемы, Неопределено));
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОбщие.ПолучитьЭлементы().Количество() = 0 Тогда
		ЭлементКонфигурация.ПолучитьЭлементы().Удалить(ЭлементОбщие);
	КонецЕсли;
	
КонецПроцедуры 

// Возвращает новую структуру параметров элемента дерева объектов метаданных.
//
// Возвращаемое значение:
//   Структура:
//     Имя           - Строка - имя родительского элемента.
//     Синоним       - Строка - синоним родительского элемента.
//     Пометка       - Булево - начальная пометка коллекции или объекта метаданных.
//     Картинка      - Число - код картинки родительского элемента.
//     КартинкаОбъекта - Число - код картинки подэлемента.
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента.
//
&НаСервере
Функция ПараметрыЭлементаДереваОбъектовМетаданных()
	
	ПараметрыЭлементаДерева = Новый Структура();
	ПараметрыЭлементаДерева.Вставить("Имя", "");
	ПараметрыЭлементаДерева.Вставить("ПолноеИмя", "");
	ПараметрыЭлементаДерева.Вставить("Синоним", "");
	ПараметрыЭлементаДерева.Вставить("Пометка", Ложь);
	ПараметрыЭлементаДерева.Вставить("Картинка", 0);
	ПараметрыЭлементаДерева.Вставить("КартинкаОбъекта", 0);
	ПараметрыЭлементаДерева.Вставить("Родитель", Неопределено);
	
	Возврат ПараметрыЭлементаДерева;
	
КонецФункции

// Добавляет новую строку в дерево значений формы (дерево),
// а также заполняет полный набор строк из метаданных по переданному параметру.
//
// Если параметр Подсистемы заполнен, то вызывается рекурсивно для всех дочерних подсистем.
//
// Параметры:
//   ПараметрыЭлемента - Структура:
//     Имя           - Строка - имя родительского элемента.
//     Синоним       - Строка - синоним родительского элемента.
//     Пометка       - Булево - начальная пометка коллекции или объекта метаданных.
//     Картинка      - Число - код картинки родительского элемента.
//     КартинкаОбъекта - Число - код картинки подэлемента.
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//   Подсистемы      - Неопределено - если заполнен, то содержит значение Метаданные.Подсистемы (коллекцию элементов).
//   Проверять       - Булево - признак проверки на принадлежность родительским подсистемам.
// 
// Возвращаемое значение:
//   Структура - строка дерева объектов метаданных.
//
&НаСервере
Функция ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, Подсистемы = Неопределено, Проверять = Истина)
	
	// Проверка на наличие командного интерфейса только в листьях дерева.
	Если Подсистемы <> Неопределено 
		И Параметры.Свойство("ТолькоПодсистемыСКИ") 
		И Не ПустаяСтрока(ПараметрыЭлемента.ПолноеИмя) 
		И ЭлементыПодсистемСКоманднымИнтерфейсом.НайтиПоЗначению(ПараметрыЭлемента.ПолноеИмя) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Подсистемы = Неопределено Тогда
		
		Если Метаданные[ПараметрыЭлемента.Имя].Количество() = 0 Тогда
			
			// Если нет ни одного объекта метаданных из нужной ветки. 
			// Например, нет ни одного регистра бухгалтерии,
			// то корень "Регистры бухгалтерии" добавлять не нужно.
			Возврат Неопределено;
			
		КонецЕсли;
		
		НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
		
		Для Каждого ЭлементКоллекцииМетаданных Из Метаданные[ПараметрыЭлемента.Имя] Цикл			
			ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
			ПараметрыЭлемента.Родитель = НоваяСтрока;
			НоваяСтрокаДерева(ПараметрыЭлемента, Истина);
		КонецЦикла;
		
		Возврат НоваяСтрока;
		
	КонецЕсли;
	
	Если Подсистемы.Количество() = 0 И ПараметрыЭлемента.Имя = "Подсистемы" Тогда
		// Если нет ни одной подсистемы, то корень "Подсистемы" добавлять не нужно.
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
	
	Для Каждого ЭлементКоллекцииМетаданных Из Подсистемы Цикл
		
		Если Не Проверять
			Или Параметры.РодительскиеПодсистемы.Количество() = 0
			Или Параметры.РодительскиеПодсистемы.НайтиПоЗначению(ЭлементКоллекцииМетаданных.Имя) <> Неопределено Тогда
			
			ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
			ПараметрыЭлемента.Родитель = НоваяСтрока;
			ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, ЭлементКоллекцииМетаданных.Подсистемы, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция НоваяСтрокаДерева(ПараметрыСтроки, ЭтоОбъектМетаданных = Ложь)
	
	Коллекция = ПараметрыСтроки.Родитель.ПолучитьЭлементы();
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Имя                 = ПараметрыСтроки.Имя;
	НоваяСтрока.Представление       = ?(ЗначениеЗаполнено(ПараметрыСтроки.Синоним), ПараметрыСтроки.Синоним, ПараметрыСтроки.Имя);
	НоваяСтрока.Пометка             = ?(ВыбранныеОбъектыМетаданных.НайтиПоЗначению(ПараметрыСтроки.ПолноеИмя) = Неопределено, 0, 1);
	НоваяСтрока.Картинка            = ПараметрыСтроки.Картинка;
	НоваяСтрока.ПолноеИмя           = ПараметрыСтроки.ПолноеИмя;
	НоваяСтрока.ЭтоОбъектМетаданных = ЭтоОбъектМетаданных;
	
	Если НоваяСтрока.ЭтоОбъектМетаданных 
		И НоваяСтрока.ПолноеИмя = НачальноеЗначениеВыбора Тогда
		ИдентификаторТекущейСтрокиПриОткрытии = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет новую строку в таблицу значений видов объектов метаданных
// конфигурации.
//
// Параметры:
//   Имя           - Строка - имя объекта метаданных или вида объекта метаданных.
//   Синоним       - Строка - синоним объекта метаданных.
//   Картинка      - Строка - картинка поставленная в соответствие объекту метаданных
//                 или виду объекта метаданных.
//   КартинкаОбъекта - Строка
//   ЭтоКоллекцияОбщие - Строка  - признак того, что текущий элемент содержит подэлементы.
//   Таб - ТаблицаЗначений
&НаСервере
Процедура КоллекцииОбъектовМетаданных_НоваяСтрока(Имя, Синоним, Картинка, КартинкаОбъекта, ЭтоКоллекцияОбщие, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	НоваяСтрока.ЭтоКоллекцияОбщие = ЭтоКоллекцияОбщие;
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для родителей передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьЭлементыРодителей(Элемент)
	
	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Родитель.ПолучитьИдентификатор();
	Элементы.ДеревоОбъектовМетаданных.Развернуть(ИдентификаторСтроки);
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Элемент.Пометка = 2 Тогда
		Родитель.Пометка = 2;
	Иначе
		Родитель.Пометка = ЗначениеПометкиЭлементов(ЭлементыРодителя);
	КонецЕсли;
	
	ПометитьЭлементыРодителей(Родитель);
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПометкиЭлементов(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементов(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПомеченные Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПометитьЭлементыРодителейНаСервере(Элемент)
	
	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Элемент.Пометка = 2 Тогда
		Родитель.Пометка = 2;
	Иначе
		Родитель.Пометка = ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя);
	КонецЕсли;
	
	ПометитьЭлементыРодителейНаСервере(Родитель);
	
КонецПроцедуры

&НаСервере
Функция ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементовНаСервере(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЕстьПомеченные И ЕстьНепомеченные, 2, ?(ЕстьПомеченные, 1, 0));
	
КонецФункции

// Процедура НачальнаяПометкаКоллекций устанавливает пометку для коллекций
// объектов метаданных, которые не имеют объектов метаданных (истина) и 
// которые имеют объекты метаданных с заданной пометкой.
//
// Параметры:
//   Родитель      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаСервере
Процедура НачальнаяПометкаКоллекций(Родитель)
	
	ВложенныеЭлементы = Родитель.ПолучитьЭлементы();
	
	Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		Если ВложенныйЭлемент.Пометка Тогда
			ПометитьЭлементыРодителейНаСервере(ВложенныйЭлемент);
		КонецЕсли;
		НачальнаяПометкаКоллекций(ВложенныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для вложенных элементов начиная
// с передаваемого элемента.
//
// Параметры:
//   Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьВложенныеЭлементы(Элемент)
	
	ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
	
	Если ВложенныеЭлементы.Количество() = 0 Тогда
		Если Не Элемент.ЭтоОбъектМетаданных Тогда
			Элемент.Пометка = 0;
		КонецЕсли;
	Иначе
		Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
			ВложенныйЭлемент.Пометка = Элемент.Пометка;
			ПометитьВложенныеЭлементы(ВложенныйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура для заполнения списка выбранных элементов дерева.
// Рекурсивно просматривает все дерево элементов и в случае, если элемент
// выбран добавляет его ПолноеИмя в список выбранных.
// Параметры:
//   Родитель      - ДанныеФормыЭлементДерева
//
&НаСервере
Процедура ПолучениеДанных(Родитель = Неопределено)
	
	Родитель = ?(Родитель = Неопределено, ДеревоОбъектовМетаданных, Родитель);
	
	КоллекцияЭлементов = Родитель.ПолучитьЭлементы();
	
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		Если Элемент.Пометка = 1 И Не ПустаяСтрока(Элемент.ПолноеИмя) Тогда
			ВыбранныеОбъектыМетаданных.Добавить(Элемент.ПолноеИмя);
		КонецЕсли;
		ПолучениеДанных(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МакетHTML()
	
	Результат =
	"
	| <!DOCTYPE html>
	| <html>
	| <head>
	| <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
	| <style>
	| * {box-sizing: border-box;}
	| 
	| .img-zoom-container {
	|   position: relative;
	| }
	| 
	| .img-zoom-lens {
	|   position: absolute;
	|   border: 1px solid #d4d4d4;
	|   /*set the size of the lens:*/
	|   width: 100px;
	|   height: 100px;
	| }
	| 
	| .img-zoom-result {
	|   border: 1px solid #d4d4d4;
	|   /*set the size of the result div:*/
	|   width: 1000px;
	|   height: 1000px;
	| }
	| </style>
	| <script>
	| function imageZoom(imgID, resultID) {
	|   var img, lens, result, cx, cy;
	|   img = document.getElementById(imgID);
	|   result = document.getElementById(resultID);
	|   /*create lens:*/
	|   lens = document.createElement(""DIV"");
	|   lens.setAttribute(""class"", ""img-zoom-lens"");
	|   /*insert lens:*/
	|   img.parentElement.insertBefore(lens, img);
	|   /*calculate the ratio between result DIV and lens:*/
	|   cx = result.offsetWidth / lens.offsetWidth;
	|   cy = result.offsetHeight / lens.offsetHeight;
	|   /*set background properties for the result DIV:*/
	|   result.style.backgroundImage = ""url('"" + img.src + ""')"";
	|   result.style.backgroundSize = (img.width * cx) + ""px "" + (img.height * cy) + ""px"";
	|   /*execute a function when someone moves the cursor over the image, or the lens:*/
	|   lens.addEventListener(""mousemove"", moveLens);
	|   img.addEventListener(""mousemove"", moveLens);
	|   /*and also for touch screens:*/
	|   lens.addEventListener(""touchmove"", moveLens);
	|   img.addEventListener(""touchmove"", moveLens);
	|   function moveLens(e) {
	|     var pos, x, y;
	|     /*prevent any other actions that may occur when moving over the image:*/
	|     e.preventDefault();
	|     /*get the cursor's x and y positions:*/
	|     pos = getCursorPos(e);
	|     /*calculate the position of the lens:*/
	|     x = pos.x - (lens.offsetWidth / 2);
	|     y = pos.y - (lens.offsetHeight / 2);
	|     /*prevent the lens from being positioned outside the image:*/
	|     if (x > img.width - lens.offsetWidth) {x = img.width - lens.offsetWidth;}
	|     if (x < 0) {x = 0;}
	|     if (y > img.height - lens.offsetHeight) {y = img.height - lens.offsetHeight;}
	|     if (y < 0) {y = 0;}
	|     /*set the position of the lens:*/
	|     lens.style.left = x + ""px"";
	|     lens.style.top = y + ""px"";
	|     /*display what the lens ""sees"":*/
	|     result.style.backgroundPosition = ""-"" + (x * cx) + ""px -"" + (y * cy) + ""px"";
	|   }
	|   function getCursorPos(e) {
	|     var a, x = 0, y = 0;
	|     e = e || window.event;
	|     /*get the x and y positions of the image:*/
	|     a = img.getBoundingClientRect();
	|     /*calculate the cursor's x and y coordinates, relative to the image:*/
	|     x = e.pageX - a.left;
	|     y = e.pageY - a.top;
	|     /*consider any page scrolling:*/
	|     x = x - window.pageXOffset;
	|     y = y - window.pageYOffset;
	|     return {x : x, y : y};
	|   }
	| }
	| </script>
	| </head>
	| <body>
	| 
	| <div class=""img-zoom-container"" width=""1000"" overflow=""hidden"">
	|   <img id=""myimage"" src=""data:image/png;base64,{Base64}"" widh=""100%"" height=""240"">
	|   <div id=""myresult"" class=""img-zoom-result""></div>
	| </div>
	| 
	| <script>
	| // Initiate zoom effect:
	| imageZoom(""myimage"", ""myresult"");
	| </script>
	| 
	| </body>
	| </html> 
	|";
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура СгенерироватьНаСервере()
	
	ПараметрыПоУмолчанию = ПараметрыПоУмолчанию();
	ЗаполнитьЗначенияСвойств(ПараметрыПоУмолчанию, ЭтотОбъект);
	Результат = СгенерированноеИзображение(ИсходныйКод, ПараметрыПоУмолчанию);
	
	Если ВыводитьВФорматеHTML Тогда
		Если Результат.ДвоичныеДанныеКартинки <> Неопределено Тогда
			РезультатОбработкиHTML = СтрЗаменить(МакетHTML(), "{Base64}" , Base64Строка(Результат.ДвоичныеДанныеКартинки));
			РезультатОбработки = "";
			
			Элементы.РезультатОбработки.Видимость = Ложь;
			Элементы.РезультатОбработкиHTML.Видимость = Истина;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Результат.АдресИзображения) Тогда
		 	РезультатОбработки = Результат.АдресИзображения;
		 	РезультатОбработкиHTML = "";
		 	
		 	Элементы.РезультатОбработки.Видимость = Истина;
		 	Элементы.РезультатОбработкиHTML.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СгенерироватьКодНаСервере()

	СборкаКода = Новый Массив;
	СборкаКода.Добавить(ИсходныйКодПодключаемойБиблиотеки);
	
	СборкаВзаимосвязей = Новый Массив;

	ВыбранныеОбъектыМетаданных.Очистить();
	ПолучениеДанных();
	
	Для Каждого ЭлементСписка Из ВыбранныеОбъектыМетаданных Цикл
		
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ЭлементСписка.Значение);
 
		Если СтрНайти(ЭлементСписка.Значение, "Справочник.") Тогда
			
			СтрокаМетаданные = СформироватьСтрокуМетаданных("_Справочник", МетаданныеОбъекта); 
			ДополнитьОписаниемКоллекции(СтрокаМетаданные, МетаданныеОбъекта, СборкаВзаимосвязей,
				ВыбранныеОбъектыМетаданных);
			
		ИначеЕсли СтрНайти(ЭлементСписка.Значение, "Документ.") Тогда
			
			СтрокаМетаданные = СформироватьСтрокуМетаданных("_Документ", МетаданныеОбъекта); 
			ДополнитьОписаниемКоллекции(СтрокаМетаданные, МетаданныеОбъекта, СборкаВзаимосвязей,
				ВыбранныеОбъектыМетаданных);
			
		ИначеЕсли СтрНайти(ЭлементСписка.Значение, "ПланВидовХарактеристик.") Тогда
			
			СтрокаМетаданные = СформироватьСтрокуМетаданных("_ПВХ", МетаданныеОбъекта); 
			ДополнитьОписаниемКоллекции(СтрокаМетаданные, МетаданныеОбъекта, СборкаВзаимосвязей,
				ВыбранныеОбъектыМетаданных);
			
		ИначеЕсли СтрНайти(ЭлементСписка.Значение, "РегистрСведений.") Тогда
			
			СтрокаМетаданные = СформироватьСтрокуМетаданных("_РегистрСведений", МетаданныеОбъекта);
			ДополнитьОписаниемКоллекции(СтрокаМетаданные, МетаданныеОбъекта, СборкаВзаимосвязей,
				ВыбранныеОбъектыМетаданных);
			
		ИначеЕсли СтрНайти(ЭлементСписка.Значение, "РегистрНакопления.") Тогда
			
			СтрокаМетаданные = СформироватьСтрокуМетаданных("_РегистрНакопления", МетаданныеОбъекта);
			ДополнитьОписаниемКоллекции(СтрокаМетаданные, МетаданныеОбъекта, СборкаВзаимосвязей,
				ВыбранныеОбъектыМетаданных);
					
		ИначеЕсли СтрНайти(ЭлементСписка.Значение, "Перечисление.") Тогда
			
			СтрокаМетаданные = СформироватьСтрокуМетаданных("_Перечисление", МетаданныеОбъекта); 
			ДополнитьОписаниемКоллекции(СтрокаМетаданные, МетаданныеОбъекта, СборкаВзаимосвязей,
				ВыбранныеОбъектыМетаданных, "ЗначенияПеречисления");
			
		КонецЕсли; 
 	
		СборкаКода.Добавить(СтрокаМетаданные);

	КонецЦикла;	
	
	СборкаКода.Добавить(СтрСоединить(СборкаВзаимосвязей, Символы.ПС));	
	ИсходныйКод = СтрСоединить(СборкаКода, Символы.ПС);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОповещениеОЗавершенииОтбора(РезультатОтбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатОтбора) <> Тип("СписокЗначений") Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлементыВерхнегоУровня = ДеревоОбъектовМетаданных.ПолучитьЭлементы();
	ЭлементыКлассовОбъектовМетаданных = ЭлементыВерхнегоУровня[0].ПолучитьЭлементы();
	
	ОтметитьПоОбъектамРекурсивно(ЭлементыКлассовОбъектовМетаданных, РезультатОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьПоОбъектамРекурсивно(Знач ЭлементыДерева, Знач РезультатОтбора)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ПодчиненныеЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
		
		Если НЕ ЭлементДерева.ЭтоОбъектМетаданных Тогда
			ОтметитьПоОбъектамРекурсивно(ПодчиненныеЭлементыДерева, РезультатОтбора);
		Иначе
			Если РезультатОтбора.НайтиПоЗначению(ЭлементДерева.ПолноеИмя) <> Неопределено Тогда
				ЭлементДерева.Пометка = 1;
				ПометитьЭлементыРодителей(ЭлементДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеКодаДиаграммы

&НаСервереБезКонтекста
Функция СформироватьСтрокуМетаданных(Команда, МетаданныеОбъекта)

	СинонимЭкранированный = ЭкранироватьСимволы(МетаданныеОбъекта.Синоним);

	Возврат СтрШаблон(
		"%1(%2, ""%3"")", 
		Команда, 
		МетаданныеОбъекта.Имя, 
		СинонимЭкранированный);

КонецФункции

&НаСервереБезКонтекста
Функция ЭкранироватьСимволы(Знач Строка)

	Результат = "";

	КодСимволаЗнаки = 48;

	Для сч = 1 По СтрДлина(Строка) Цикл
    	Символ = Сред(Строка, сч, 1);
    	Если Символ <> " " 
    		И КодСимвола(Символ) < КодСимволаЗнаки Тогда
    		Результат = Результат + СтрШаблон("&#%1;", КодСимвола(Символ));
    	Иначе
			Результат = Результат + Символ;   			
    	КонецЕсли;
    	
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ДополнитьОписаниемКоллекции(
	СтрокаМетаданные, 
	МетаданныеОбъекта, 
	СборкаВзаимосвязей, 
	ВыбранныеОбъектыМетаданных, 
	ПутьКоллекция = "Реквизиты")
	
	Коллекция = МетаданныеОбъекта[ПутьКоллекция];

	Если ФормироватьРеквизитныйСоставОбъектов Тогда
		СборкаСтроки = Новый Массив;
		СборкаСтроки.Добавить(СтрШаблон("%1 {", СтрокаМетаданные));
	КонецЕсли;

	Если ВыводитьПредопределенныеРеквизиты Тогда
		ДополнитьОписаниеЭлементаПоКоллекции(
			МетаданныеОбъекта.СтандартныеРеквизиты, 
			МетаданныеОбъекта, 
			СборкаСтроки, 
			СборкаВзаимосвязей, 
			ВыбранныеОбъектыМетаданных, 
			ПутьКоллекция, 
			"{static} ");	
	КонецЕсли;
	
	Если СтрНайти(СтрокаМетаданные, "_Регистр") = 1 Тогда
		ДополнитьОписаниеЭлементаПоКоллекции(МетаданныеОбъекта.Измерения,
			МетаданныеОбъекта, СборкаСтроки, СборкаВзаимосвязей,
			ВыбранныеОбъектыМетаданных, ПутьКоллекция, "<$d> ");
		ДополнитьОписаниеЭлементаПоКоллекции(МетаданныеОбъекта.Ресурсы,
			МетаданныеОбъекта, СборкаСтроки, СборкаВзаимосвязей,
			ВыбранныеОбъектыМетаданных, ПутьКоллекция, "<$r> ");
	КонецЕсли;
	
	ДополнитьОписаниеЭлементаПоКоллекции(
		Коллекция, 
		МетаданныеОбъекта, 
		СборкаСтроки, 
		СборкаВзаимосвязей, 
		ВыбранныеОбъектыМетаданных, 
		ПутьКоллекция);
	
	Если ЭтоМетаданныеСТабличнойЧастью(СтрокаМетаданные) Тогда
		
		Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			СборкаСтроки.Добавить(СтрШаблон("%1---%2---", Символы.Таб, ТабличнаяЧасть.Имя));	
			ДополнитьОписаниеЭлементаПоКоллекции(
				ТабличнаяЧасть.Реквизиты, 
				МетаданныеОбъекта, 
				СборкаСтроки, 
				СборкаВзаимосвязей, 
				ВыбранныеОбъектыМетаданных, 
				ПутьКоллекция);
		КонецЦикла;  
			
	КонецЕсли;	
	
	Если ФормироватьРеквизитныйСоставОбъектов Тогда
		СборкаСтроки.Добавить("}");
		СтрокаМетаданные = СтрСоединить(СборкаСтроки, Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоМетаданныеСТабличнойЧастью(СтрокаМетаданные)

	Возврат СтрНайти(СтрокаМетаданные, "Справочник.")
			ИЛИ СтрНайти(СтрокаМетаданные, "Документ.")
			ИЛИ СтрНайти(СтрокаМетаданные, "Обработка.") 
			ИЛИ СтрНайти(СтрокаМетаданные, "ПланВидовХарактеристик.")
			ИЛИ СтрНайти(СтрокаМетаданные, "Задача.") 
			ИЛИ СтрНайти(СтрокаМетаданные, "БизнесПроцесс.");
	
КонецФункции

&НаСервере
Процедура ДополнитьОписаниеЭлементаПоКоллекции(
	Коллекция, 
	МетаданныеОбъекта, 
	СборкаСтроки, 
	СборкаВзаимосвязей, 
	ВыбранныеОбъектыМетаданных, 
	ПутьКоллекция, 
	Префикс = "+")

	Для Каждого Элемент Из Коллекция Цикл
		
		Если ФормироватьРеквизитныйСоставОбъектов Тогда
			СборкаСтроки.Добавить(СтрШаблон("%1 %2%3", Символы.Таб, Префикс, Элемент.Имя));
		КонецЕсли;
		
		Если ПутьКоллекция <> "ЗначенияПеречисления" Тогда
			
			ТипыЭлемента = Элемент.Тип.Типы();
			ДополнитьВзаимосвязи(
				Элемент.Имя, 
				ТипыЭлемента, 
				СборкаВзаимосвязей, 
				МетаданныеОбъекта, 
				ВыбранныеОбъектыМетаданных); 
		КонецЕсли;
		
	КонецЦикла;  

КонецПроцедуры

&НаСервере
Процедура ДополнитьВзаимосвязи(Имя, ТипыДанных, СборкаВзаимосвязей, МетаданныеОбъекта, ВыбранныеОбъектыМетаданных)

	Для Каждого ТипДанных Из ТипыДанных Цикл
		
		Если Не ЭтоСсылка(ТипДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеСвязи = Метаданные.НайтиПоТипу(ТипДанных);
		
		Если ВыбранныеОбъектыМетаданных.НайтиПоЗначению(МетаданныеСвязи.ПолноеИмя()) = Неопределено Тогда   
			Продолжить;
		КонецЕсли;
			
		Если Имя = "Ссылка" Или Имя = "Родитель" Тогда
			Продолжить;	
		КонецЕсли;
		
		ДополнитьВзаимосвязь(СборкаВзаимосвязей, МетаданныеСвязи, МетаданныеОбъекта, Имя);
			
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьВзаимосвязь(СборкаВзаимосвязей, МетаданныеСвязи, МетаданныеОбъекта, Имя)
	
	Если ФормироватьДетальныеОтношенияНаУровнеРеквизитов Тогда
		// BSLLS:UsingHardcodeNetworkAddress-off
		СтрокаВзаимосвязь = СтрШаблон("%1 --> %2::%3", 
			МетаданныеСвязи.Имя, 
			МетаданныеОбъекта.Имя, 
			Имя);
		СборкаВзаимосвязей.Добавить(СтрокаВзаимосвязь);
		// BSLLS:UsingHardcodeNetworkAddress-on
	Иначе
		Если МетаданныеСвязи.Имя = МетаданныеОбъекта.Имя Тогда
			Возврат;
		КонецЕсли;
		СтрокаВзаимосвязь = СтрШаблон("%1 --> %2", МетаданныеСвязи.Имя, МетаданныеОбъекта.Имя);	
		Если СборкаВзаимосвязей.Найти(СтрокаВзаимосвязь) = Неопределено Тогда
			СборкаВзаимосвязей.Добавить(СтрокаВзаимосвязь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсСлужебный

// Функция - Сгенерированное изображение
//           Формирует на основании текстового описания в формате UML изображение, содержащее UML - диаграмму
//           Формат описания см. https://plantuml.com/ru/
// Параметры:
//  Данные		 - Строка	  -  текстовое описание диаграммы
//  Параметры	 - Структура  -  Параметры доступа к серверу рендеринга ( см. функцию ПараметрыПоУмолчанию)
// 
// Возвращаемое значение:
//  Структура - содержащая
//				ОтветСервера      - HTTPОтвет - Данные, полученные от сервера рендеринга
//				АдресИзображения  - Строка - Адрес во временном хранилище, содержащее данные изображения
//
&НаСервере
Функция СгенерированноеИзображение(Данные, Параметры) 
	
	ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(Данные);	
	СжатыеДанные = СжатыеДанные(ДвоичныеДанныеСтроки);	
	Base64Строка = Base64Строка(СжатыеДанные);     
	ФорматPlantUML = ФорматPlantUML(Base64Строка);  
	Соединение = Новый HTTPСоединение(Параметры.СерверРендеринга, , , , , Параметры.ТаймаутСоединения);
	ТекстЗапроса = РесурсСервера + ФорматPlantUML;
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = Соединение.Получить(Запрос);

	// ответ  не анализируется - при необходимости нужно дописать его анализ
	ДвоичныеДанныеКартинки = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Результат = Новый Структура;
	Результат.Вставить("ОтветСервера", Ответ);
	Если ВыводитьВФорматеHTML Тогда
		Результат.Вставить("ДвоичныеДанныеКартинки", ДвоичныеДанныеКартинки);
	Иначе
		Результат.Вставить("АдресИзображения", ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки));	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ()

// Функция - Параметры по умолчанию
//           получает параметры по умолчанию, необходимые для доступа к серверу рендеоинша изображения
// Возвращаемое значение:
// Структура  - содержащая
//				СерверРендеринга    - Строка - адрес сервера, осуществляющего рендеринг
//				РесурсСервера  		- Строка - имя ресурса, ответственного за рендеринг 
//                                    Например для svg изображений это может быть "/plantuml/svg/"
//				ТаймаутСоединения   - число - максимальное время ожидания сервера
//
&НаСервере
Функция ПараметрыПоУмолчанию()   
	
	Результат = Новый Структура;
	Результат.Вставить("СерверРендеринга", "www.plantuml.io");
	Результат.Вставить("РесурсСервера", "/plantuml/png/");
	Результат.Вставить("ТаймаутСоединения", 180);
	Возврат  Результат;

КонецФункции

#КонецОбласти

#Область КодированиеДанных

&НаСервереБезКонтекста
Функция ЗаписатьZip(Данные)

#Если МобильноеПриложениеСервер Тогда
	ВызватьИсключение(НСтр("ru = 'Работа с Zip-файлами в мобильной платформе не поддерживается'"));
#Иначе
	ВременныйФайл = ПолучитьИмяВременногоФайла(".bin");
	Данные.Записать(ВременныйФайл);
	ПотокZip = Новый ПотокВПамяти;
	ЗаписьZip = Новый ЗаписьZipФайла(ПотокZip);
	ЗаписьZip.Добавить(ВременныйФайл);
	ЗаписьZip.Записать();
	УдалитьФайлы(ВременныйФайл);

	Возврат ПотокZip.ЗакрытьИПолучитьДвоичныеДанные();
#КонецЕсли

КонецФункции

&НаСервереБезКонтекста
Функция СжатыеДанные(Данные) 

	ЧтениеДанных = Новый ЧтениеДанных(ЗаписатьZip(Данные));

	НачальноеСмещение = 14;
	ЧтениеДанных.Пропустить(НачальноеСмещение);
	ЧтениеДанных.ПрочитатьЦелое32(); // CRC32

	РазмерСжатыхДанных = ЧтениеДанных.ПрочитатьЦелое32();
	ЧтениеДанных.ПрочитатьЦелое32(); // РазмерИсходныхДанных

	РазмерИмениФайла = ЧтениеДанных.ПрочитатьЦелое16();
	РазмерДополнительногоПоля = ЧтениеДанных.ПрочитатьЦелое16();
	ЧтениеДанных.Пропустить(РазмерИмениФайла + РазмерДополнительногоПоля);

	ПотокGZip = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(ПотокGZip);
	ЧтениеДанных.КопироватьВ(ЗаписьДанных, РазмерСжатыхДанных);
	
	Возврат ПотокGZip.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции

&НаСервереБезКонтекста
Функция ФорматPlantUML(Данные) 
	
	Результат = "";
	СтрокаИскомая	  = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	СтрокаПодстановки = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_"; 
	Для Счетчик = 0 По СтрДлина(Данные) - 1 Цикл     
		ТекСимвол = Сред(Данные, счетчик + 1, 1);
		Поз = СтрНайти(СтрокаИскомая, ТекСимвол); 
		Если ТекСимвол = Символы.ПС ИЛИ ТекСимвол = Символы.ВК Тогда
		   Продолжить;
		КонецЕсли;
		Если Поз > 0  Тогда
			Результат = Результат + Сред(СтрокаПодстановки, Поз, 1);
		Иначе
			Результат = Результат + ТекСимвол; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;   
	
КонецФункции 

#КонецОбласти