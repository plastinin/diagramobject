
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяСхема = Истина;
	
	ЗаполнитьПрефиксыПоУмолчаниюНаСервере();
	
	ЗаполнитьПараметрыПоУмолчанию();
	
	ОбновитьДоступностьФлажковШаг2(ЭтаФорма);
			
	ДеревоОбъектовМетаданныхЗаполнить();

	НачальнаяПометкаКоллекций(ДеревоОбъектовМетаданных);
	
	СписокРасширений = НовыйСписокРасширенийНаСервере(); // начальное заполнение списка

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// Устанавливаем начальное значение выбора.
	Если ИдентификаторТекущейСтрокиПриОткрытии > 0 Тогда
		Элементы.ДеревоОбъектовМетаданных.ТекущаяСтрока = ИдентификаторТекущейСтрокиПриОткрытии;
	КонецЕсли;

	АнализРасширений = Истина; // сразу включаем/нет  МаксКолРасширений первых расширений
	МаксКолРасширений = 20; // определяется числом созаваемых деревьев расширений
	АнализРасширенийПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ОбработчикиСобытий_ДеревоОбъектовМетаданных

&НаКлиенте
Процедура АнализРасширенийПриИзменении(Элемент)
	
//  МаксКолРасширений - реквизит формы, инициализируется ПриСозданииНаСервере()
	ОбщееЧислоРасширений = СписокРасширений.Количество();
	КолВыбранныхРасширений = КоличествоПомеченныхРасширений();
	
	Если ОбщееЧислоРасширений = 0 Тогда
		ТекстСообщения = "Нет расширений в этой конфигурации.";
		
	ИначеЕсли КолВыбранныхРасширений > МаксКолРасширений Тогда  // не более 10
		ТекстСообщения = "Число выбранных расширений " + Строка(КолВыбранныхРасширений)
						+ " больше макс.числа " + Строка(МаксКолРасширений) + ".
						|Выберите " + Строка(МаксКолРасширений) + " из " + Строка(ОбщееЧислоРасширений) + "  расширений
						|или увеличьте максимальное число отображаемых расширений  в Настройках.
						|
						|Идёт заполнение метаданных, пожалуйста подождите...";
		КолВыбранныхРасширений = МаксКолРасширений;
		
		// выключение лишних расширений
		Н = 0;
		Для каждого Эл Из СписокРасширений Цикл
			Если Эл.Пометка Тогда
				Н = Н + 1;
				Если Н > КолВыбранныхРасширений Тогда
					Эл.Пометка = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // КолРасширений <= МаксКолРасширений
		ТекстСообщения = "Выбрано " + Строка(КолВыбранныхРасширений) + " из " + Строка(ОбщееЧислоРасширений) + " расширений.
						|Идёт запонение метаданных, пожалуйста подождите...";
		
	КонецЕсли;
	
	Если АнализРасширений Тогда
		ПоказатьПредупреждение(, ТекстСообщения, 10);
	КонецЕсли;

	// ---------ПереЗаполняем Расширения--------------------------
	Если АнализРасширений И КолВыбранныхРасширений > 0 Тогда
		Номер = 1; // все расширения в 1 дерево!
		
		// очистка всех деревьев расширений
		Строки = ЭтаФорма.ДеревоОбъектовМетаданных1.ПолучитьЭлементы();
		ЧислоРанееВыбранныхРасширений = Строки.Количество();
		Для н = 1 По ЧислоРанееВыбранныхРасширений Цикл
			Строки.Удалить(0);
		КонецЦикла;
		
		Для Каждого Эл Из СписокРасширений Цикл
			Если Не Эл.Пометка Тогда
				Продолжить;
			КонецЕсли;
		//	Номер = Номер + 1;  // если разные закладки будут
			Индекс = Эл.Значение;
			ДеревоОбъектовМетаданныхРасширенияЗаполнить(Номер, Индекс);
		КонецЦикла;
	КонецЕсли;

	Элементы.ГруппаНастроекРасширений.Видимость = АнализРасширений;
	
	Элементы["ГруппаРасширений"].Видимость = АнализРасширений; // включаем после формирования
	
КонецПроцедуры

// ----- Подстемы ---------

&НаКлиенте
Процедура ОтметитьПоПодсистемамДерево(Номер = 0)
		
	ИмяДерева = "ДеревоОбъектовМетаданных" + ?(Номер = 0, "", Формат(Номер, "ЧГ="));
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеОЗавершенииОтбора", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ИмяДереваОбъектовМетаданных", ИмяДерева);
	ПараметрыФормы.Вставить("СписокРасширений", СписокРасширений);
	
	ОткрытьФорму("ВнешняяОбработка.ДиаграммаОбъектов1С.Форма.ОтборПоПодсистемам", ПараметрыФормы, ЭтаФорма, 
		УникальныйИдентификатор, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьПоПодсистемам(Команда)
	ОтметитьПоПодсистемамДерево();
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьПоПодсистемам1(Команда)
	ОтметитьПоПодсистемамДерево(1);
КонецПроцедуры

// ----- общая процедура пометки в любом дереве ---------
&НаКлиенте
Процедура ПометкаПриИзменении(ТекущиеДанные)
	Пометка2 = 2;
	Если ТекущиеДанные.Пометка = Пометка2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	ПометитьВложенныеЭлементы(ТекущиеДанные); // вниз
	ПометитьЭлементыРодителей(ТекущиеДанные); // вверх

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовМетаданныхПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;

	ПометкаПриИзменении(ТекущиеДанные);
		
	// поиск и пометка в расширениях
	Если АнализРасширений Тогда
		ПоискИПометкаВДругомДереве(ТекущиеДанные, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовМетаданных1ПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
	ПометкаПриИзменении(ТекущиеДанные);
	
	// поиск и пометка элемента в осн.Конфигурации
	ПоискИПометкаВДругомДереве(ТекущиеДанные, Истина);
	ПоискИПометкаВДругомДереве(ТекущиеДанные, Ложь); // пометка общих объектов в других расширениях
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Шаг2

&НаКлиенте
Процедура ДекорацияШаг2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматСтроки = "GenerateCode" Тогда
		СгенерироватьКодНаСервере();
		УдалятьНеСвязанныеОбъектыПриИзменении(Неопределено); // +++ OS
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКод(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьКодЗавершение", ЭтотОбъект);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = "Выберите Каталог и Имя файла";
	Диалог.ПолноеИмяФайла = "";
	
	Фильтр = "";
	СписокТиповФайлов = "txt,wsd,plantuml,iuml";
	МассивТиповФайлов = СтрРазделить(СписокТиповФайлов, ",");
	Для Каждого ИмяТип Из МассивТиповФайлов Цикл
		Фильтр = Фильтр + ВРЕГ(ИмяТип) + "-файл (*." + нрег(ИмяТип) + ")|*." + нрег(ИмяТип) + "|";
	КонецЦикла;
	Фильтр = Фильтр + "Все файлы (*.*)|*.*";
	Диалог.Фильтр = Фильтр;
	
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКод(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКодЗавершение", ЭтотОбъект);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите Каталог и Имя файла";
	Диалог.ПолноеИмяФайла = ""; 
	
	Фильтр = "";
	СписокТиповФайлов = "txt,wsd,plantuml,iuml";
	МассивТиповФайлов = СтрРазделить(СписокТиповФайлов, ",");
	Для Каждого ИмяТип Из МассивТиповФайлов Цикл
		Фильтр = Фильтр + ВРЕГ(ИмяТип) + "-файл (*." + нрег(ИмяТип) + ")|*." + нрег(ИмяТип) + "|";
	КонецЦикла;
	Фильтр = Фильтр + "Все файлы (*.*)|*.*";
	Диалог.Фильтр = Фильтр;
	
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Шаг3

&НаКлиенте
Процедура ДекорацияШаг3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматСтроки = "GenerateScheme" Тогда 
		СгенерироватьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьНеСвязанныеОбъектыПриИзменении(Элемент)
	Если УдалятьНеСвязанныеОбъекты Тогда
		ИсходныйКод = ИсходныйКод + "
		|remove @unlinked";
	Иначе
		ИсходныйКод = СтрЗаменить(ИсходныйКод, "remove @unlinked", "");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Настройки

&НаКлиенте
Процедура СтандартнаяСхемаПриИзменении(Элемент)
	ЗаполнитьПараметрыПоУмолчанию();
	Элементы.ГруппаПрефиксов.Доступность = СтандартнаяСхема;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПоУмолчанию(Команда)
	ЗаполнитьПрефиксыПоУмолчаниюНаСервере();
	СтандартнаяСхемаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаРаботаСДиаграммами Тогда
		АнализРасширенийПриИзменении(Неопределено);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ЗаполнитьПараметрыПоУмолчанию()

	ЗаполнитьИсходникБиблиотекиПоУмолчанию();
	ЗаполнитьНастройкиПоУмолчанию(); 
	ЗаполнитьСписокОбъектовМетаданныхПоУмолчанию();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсходникБиблиотекиПоУмолчанию()
	
	Если СтандартнаяСхема Тогда
		ТаблПрефиксов = ЭтаФорма.ТаблицаПрефиксов;
		ИсходныйКодПодключаемойБиблиотеки = "'---- Типы объектов ----";
		ПрефиксДляДругих = "";
		Для каждого Стр Из ТаблПрефиксов Цикл
			ИсходныйКодПодключаемойБиблиотеки = ИсходныйКодПодключаемойБиблиотеки + Символы.ПС
			+ Стр.Префикс + " =" + Стр.ТипМетаданных;
			Если Стр.Пометка Тогда
				ПрефиксДляДругих = Стр.Префикс;
			КонецЕсли;
		КонецЦикла;
		ИсходныйКодПодключаемойБиблиотеки = ИсходныйКодПодключаемойБиблиотеки + Символы.ПС
		+ ПрефиксДляДругих + " =Все_другие_объекты
		|
		|" + ПрефиксДляДругих + " =Обозначения_Типов_Данных{
	// см. ПрефиксПоТипу()
		|	-Ссылка // красный квадратик
		|	#Булево // желтый ромбик
		|	~Дата   // синий треугольник
		|	*Число  // черная точка
		|	+Строка // зелёный кружок
		|}
		|";
	Иначе
		ИсходныйКодПодключаемойБиблиотеки = "'>>> библиотека 1ce-icons-for-plantuml (ext)
		|!define v8_PUML https://raw.githubusercontent.com/plastinin/1ce-icons-for-plantuml/extended/dist/
		|!include v8_PUML/common.puml
		|!include v8_PUML/v8_AccRg.puml
		|!include v8_PUML/v8_Document.puml
		|!include v8_PUML/v8_Catalog.puml
		|!include v8_PUML/v8_InfoRg.puml
		|!include v8_PUML/v8_ChartsOfCharacteristicTypes.puml
		|!include v8_PUML/v8_DefinedTypes.puml
		|!include v8_PUML/v8_Enum.puml
		|'<<<
		|";
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Внимание! Проверьте доступ к сайту https://raw.githubusercontent.com";
		Сообщение.Сообщить();
	КонецЕсли;
	
	ИсходныйКод = ИсходныйКодПодключаемойБиблиотеки;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПоУмолчанию()
	
	ПараметрыПоУмолчанию = ПараметрыПоУмолчанию();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыПоУмолчанию);
	
КонецПроцедуры

// Функция - Параметры по умолчанию
//           получает параметры по умолчанию, необходимые для доступа к серверу рендеоинша изображения
// Возвращаемое значение:
// Структура  - содержащая
//				СерверРендеринга    - Строка - адрес сервера, осуществляющего рендеринг
//				РесурсСервера  		- Строка - имя ресурса, ответственного за рендеринг 
//                                    Например для svg изображений это может быть "/plantuml/svg/"
//				ТаймаутСоединения   - число - максимальное время ожидания сервера
//
Функция ПараметрыПоУмолчанию()
	
	Результат = Новый Структура;
	Результат.Вставить("СерверРендеринга", "www.plantuml.com");
	Результат.Вставить("РесурсСервера", "/plantuml/svg/");
	Результат.Вставить("ТаймаутСоединения", 180); // сек. = 3 мин.
	Возврат  Результат;

КонецФункции

// ------отбор---------------------------------------

&НаКлиенте
Процедура ОповещениеОЗавершенииОтбора(РезутатОтбора, ДополнительныеПараметры) Экспорт
	
	ИмяДереваОбъектовМетаданных0 = "ДеревоОбъектовМетаданных"; // дерево полной конфигурации
	
	Если РезутатОтбора = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(РезутатОтбора) = Тип("СписокЗначений") Тогда // старая схема без расширений
		ИмяДереваОбъектовМетаданных = ИмяДереваОбъектовМетаданных0;
		СписокОбъектов = РезутатОтбора;
		
	ИначеЕсли ТипЗнч(РезутатОтбора) = Тип("Структура") Тогда
		ИмяДереваОбъектовМетаданных = ""; 
		СписокОбъектов = Новый СписокЗначений;
		РезутатОтбора.Свойство("ИмяДереваОбъектовМетаданных", ИмяДереваОбъектовМетаданных);
		РезутатОтбора.Свойство("СписокОбъектов", СписокОбъектов);
	КонецЕсли;
	
	// всегда надо в основной конфе искать
	ЭлементыВерхнегоУровня = ЭтаФорма[ИмяДереваОбъектовМетаданных0].ПолучитьЭлементы();
	ЭлементыОбъектовМетаданных = ЭлементыВерхнегоУровня[0].ПолучитьЭлементы();
	ОтметитьПоОбъектамРекурсивно(ЭлементыОбъектовМетаданных, СписокОбъектов);

	Если ИмяДереваОбъектовМетаданных <> ИмяДереваОбъектовМетаданных0 Тогда // Расширение
		ЭлементыРасширений = ЭтаФорма[ИмяДереваОбъектовМетаданных].ПолучитьЭлементы();
		Для каждого Расширение Из ЭлементыРасширений Цикл
			ЭлементыОбъектовМетаданных = Расширение.ПолучитьЭлементы();
			ОтметитьПоОбъектамРекурсивно(ЭлементыОбъектовМетаданных, СписокОбъектов);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// ------Запись---------------------------------------

&НаКлиенте
Процедура СохранитьКодЗавершение(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла =  Результат[0];
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст("@StartUML
	|' КодировкаТекста: UTF-8
	| " + ИсходныйКод + "
	|@EndUML");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьКодЗавершениеЗаписи", ЭтотОбъект);
	ТекстДок.НачатьЗапись(ОписаниеОповещения, ИмяФайла, "UTF-8");
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКодЗавершениеЗаписи(УспешноеЗавершение, ДопПараметры = Неопределено) Экспорт
	Если УспешноеЗавершение Тогда
		ТекстСообщения = "Файл успешно сохранен.";
	Иначе
		ТекстСообщения = "Ошибка при записи в файл!";
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
КонецПроцедуры

// ------Чтение---------------------------------------

&НаКлиенте
Процедура ОткрытьКодЗавершение(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла =  Результат[0];

	ТекстДок = Новый ТекстовыйДокумент;
	ПараметрыЧтения = Новый Структура("ТекстДок", ТекстДок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКодЗавершениеЧтения", ЭтаФорма, ПараметрыЧтения);
	
	ТекстДок.НачатьЧтение(ОписаниеОповещения, ИмяФайла, "UTF-8");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКодЗавершениеЧтения(Результат) Экспорт
	Если Результат <> Неопределено Тогда
		ИсходныйКод = Результат.ТекстДок.ПолучитьТекст();
		ИсходныйКод = СтрЗаменить(ИсходныйКод, "@StartUML", "");
		ИсходныйКод = СтрЗаменить(ИсходныйКод, "@EndUML", "");
		ИсходныйКод = СтрЗаменить(ИсходныйКод, "' КодировкаТекста: UTF-8", "");
		ИсходныйКод = СтрЗаменить(ИсходныйКод, Символы.ПС + Символы.ПС, "");
	Иначе
		ТекстСообщения = "Ошибка при чтении файла!";
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// ------Видимость------------------------------------

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьФлажковШаг2(Форма)
	
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементыФормы.ФормироватьДетальныеОтношенияНаУровнеРеквизитов.Доступность = Форма.ФормироватьРеквизитныйСоставОбъектов;
	ЭлементыФормы.ВсеПодчиненныеЭлементы.Доступность = Форма.ФормироватьРеквизитныйСоставОбъектов;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДереваМетеданных

&НаСервере
Функция ИменаГруппМетаданныхДляВыбора()
	стрГруппы = "ПланыОбмена,WebСервисы,HTTPСервисы" // +Роли,ПараметрыСеанса,ОбщиеМодули,ОбщиеФормы,ОбщиеМакеты
	+ ",Справочники,Документы,Отчеты,Обработки"
	+ ",РегистрыНакопления,РегистрыСведений,РегистрыБухгалтерии,РегистрыРасчета"
	+ ",ПланыВидовХарактеристик,ПланыСчетов,ПланыВидовРасчета"
	+ ",Задачи,БизнесПроцессы,Перечисления";
	МассивИменГрупп = СтрРазделить(стрГруппы, ",");
	Возврат МассивИменГрупп;
КонецФункции

&НаКлиенте
Процедура ОтметитьПоОбъектамРекурсивно(Знач ЭлементыДерева, Знач РезультатОтбора, Очистить = Ложь)
	
	Для Каждого Элемент1 Из ЭлементыДерева Цикл // выключение всех других объектов
		ПодчиненныеЭлементыДерева = Элемент1.ПолучитьЭлементы();
		Если НЕ Элемент1.ЭтоОбъектМетаданных Тогда
			ОтметитьПоОбъектамРекурсивно(ПодчиненныеЭлементыДерева, РезультатОтбора, Истина);
		Иначе
			Элемент1.Пометка = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент1 Из ЭлементыДерева Цикл
		ПодчиненныеЭлементыДерева = Элемент1.ПолучитьЭлементы();
		Если НЕ Элемент1.ЭтоОбъектМетаданных Тогда
			ОтметитьПоОбъектамРекурсивно(ПодчиненныеЭлементыДерева, РезультатОтбора);
		Иначе
			Если РезультатОтбора.НайтиПоЗначению(Элемент1.ПолноеИмя) <> Неопределено Тогда
				Элемент1.Пометка = 1;
				ПометитьЭлементыРодителей(Элемент1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для вложенных элементов начиная
// с передаваемого элемента.
//
// Параметры:
// Элемент   - ДанныеФормыКоллекцияЭлементовДерева - Элемент дерева
//
&НаКлиенте
Процедура ПометитьВложенныеЭлементы(Элемент)
	
	ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
	
	Если ВложенныеЭлементы.Количество() = 0 Тогда
		Если Не Элемент.ЭтоОбъектМетаданных Тогда
			Элемент.Пометка = 0;
		КонецЕсли;
	Иначе
		Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
			ВложенныйЭлемент.Пометка = Элемент.Пометка;
			ПометитьВложенныеЭлементы(ВложенныйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОбъектовМетаданныхПоУмолчанию()
	
	Если КоллекцияВыбираемыхОбъектовМетаданных.Количество() Тогда
		КоллекцияВыбираемыхОбъектовМетаданных.Очистить();
	КонецЕсли;
	
	мИменаГрупп = ИменаГруппМетаданныхДляВыбора();
	Для каждого ИмяГруппы Из мИменаГрупп Цикл
		КоллекцияВыбираемыхОбъектовМетаданных.Добавить(ИмяГруппы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодсистем(СписокПодсистем) 
	Для Каждого Подсистема Из СписокПодсистем Цикл
		Если Подсистема.ВключатьВКомандныйИнтерфейс Тогда
			ЭлементыПодсистемСКоманднымИнтерфейсом.Добавить(Подсистема.ПолноеИмя());
		КонецЕсли;
		
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			ЗаполнитьСписокПодсистем(Подсистема.Подсистемы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ТаблицаОбъектовМетаданных()
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("Синоним");
	ТЗ.Колонки.Добавить("Картинка");
	ТЗ.Колонки.Добавить("КартинкаОбъекта");
	ТЗ.Колонки.Добавить("ЭтоКоллекцияОбщие");
	ТЗ.Колонки.Добавить("ПолноеИмя");
	ТЗ.Колонки.Добавить("Родитель");
	
	НоваяСтрокаТЗ("Подсистемы",                   "Подсистемы",                     35, 36, Истина, ТЗ);
	НоваяСтрокаТЗ("ОбщиеМодули",                  "Общие модули",                   37, 38, Истина, ТЗ);
	НоваяСтрокаТЗ("ПараметрыСеанса",              "Параметры сеанса",               39, 40, Истина, ТЗ);
	НоваяСтрокаТЗ("Роли",                         "Роли",                           41, 42, Истина, ТЗ);
	НоваяСтрокаТЗ("КритерииОтбора",               "Критерии отбора",                45, 46, Истина, ТЗ);
	НоваяСтрокаТЗ("ПодпискиНаСобытия",            "Подписки на события",            47, 48, Истина, ТЗ);
	НоваяСтрокаТЗ("РегламентныеЗадания",          "Регламентные задания",           49, 50, Истина, ТЗ);
	НоваяСтрокаТЗ("ФункциональныеОпции",          "Функциональные опции",           51, 52, Истина, ТЗ);
	НоваяСтрокаТЗ("ПараметрыФункциональныхОпций", "Параметры функциональных опций", 53, 54, Истина, ТЗ);
	НоваяСтрокаТЗ("ХранилищаНастроек",            "Хранилища настроек",             55, 56, Истина, ТЗ);
	НоваяСтрокаТЗ("ОбщиеФормы",                   "Общие формы",                    57, 58, Истина, ТЗ);
	НоваяСтрокаТЗ("ОбщиеКоманды",                 "Общие команды",                  59, 60, Истина, ТЗ);
	НоваяСтрокаТЗ("ГруппыКоманд",                 "Группы команд",                  61, 62, Истина, ТЗ);
	НоваяСтрокаТЗ("Интерфейсы",                   "Интерфейсы",                     63, 64, Истина, ТЗ);
	
	НоваяСтрокаТЗ("ОбщиеМакеты",                  "Общие макеты",                   65, 66, Истина, ТЗ);
	НоваяСтрокаТЗ("ОбщиеКартинки",                "Общие картинки",                 67, 68, Истина, ТЗ);
	НоваяСтрокаТЗ("ПакетыXDTO",                   "XDTO-пакеты",                    69, 70, Истина, ТЗ);
	
	НоваяСтрокаТЗ("Стили",                        "Стили",                          75, 76, Истина, ТЗ);
	НоваяСтрокаТЗ("Языки",                        "Языки",                          77, 78, Истина, ТЗ);
	
	НоваяСтрокаТЗ("ПланыОбмена",                  "Планы обмена",
		БиблиотекаКартинок.ПланОбмена, БиблиотекаКартинок.ПланОбменаОбъект, Истина, ТЗ);
	НоваяСтрокаТЗ("WebСервисы",                   "Web-сервисы",
	БиблиотекаКартинок.ГеографическаяСхема, БиблиотекаКартинок.ГеографическаяСхема, Истина, ТЗ);
	НоваяСтрокаТЗ("HTTPСервисы",                  "HTTP-сервисы",
	БиблиотекаКартинок.ГеографическаяСхема, БиблиотекаКартинок.ГеографическаяСхема, Истина, ТЗ);
	НоваяСтрокаТЗ("WSСсылки",                     "WS-ссылки",
	БиблиотекаКартинок.ГеографическаяСхема, БиблиотекаКартинок.ГеографическаяСхема, Истина, ТЗ);
	
	НоваяСтрокаТЗ("Константы",               "Константы", 
	БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    Ложь, ТЗ);
	НоваяСтрокаТЗ("Справочники",             "Справочники",
	БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.СправочникОбъект,             Ложь, ТЗ);
	НоваяСтрокаТЗ("Документы",               "Документы",
	БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               Ложь, ТЗ);
	НоваяСтрокаТЗ("ЖурналыДокументов",       "Журналы документов",
	БиблиотекаКартинок.ЖурналДокументов,       БиблиотекаКартинок.ЖурналДокументов,             Ложь, ТЗ);
	НоваяСтрокаТЗ("Перечисления",            "Перечисления",
	БиблиотекаКартинок.Перечисление,           БиблиотекаКартинок.Перечисление,                 Ложь, ТЗ);
	НоваяСтрокаТЗ("Отчеты",                  "Отчеты",
	БиблиотекаКартинок.Отчет,                  БиблиотекаКартинок.Отчет,                        Ложь, ТЗ);
	НоваяСтрокаТЗ("Обработки",               "Обработки",
	БиблиотекаКартинок.Обработка,              БиблиотекаКартинок.Обработка,                    Ложь, ТЗ);
	НоваяСтрокаТЗ("ПланыВидовХарактеристик", "Планы видов характеристик",
	БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, ТЗ);
	НоваяСтрокаТЗ("ПланыСчетов",             "Планы счетов",
	БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             Ложь, ТЗ);
	НоваяСтрокаТЗ("ПланыВидовРасчета",       "Планы видов характеристик",
	БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, ТЗ);
	НоваяСтрокаТЗ("РегистрыСведений",        "Регистры сведений",
	БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              Ложь, ТЗ);
	НоваяСтрокаТЗ("РегистрыНакопления",      "Регистры накопления",
	БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            Ложь, ТЗ);
	НоваяСтрокаТЗ("РегистрыБухгалтерии",     "Регистры бухгалтерии",
	БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           Ложь, ТЗ);
	НоваяСтрокаТЗ("РегистрыРасчета",         "Регистры расчета",
	БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               Ложь, ТЗ);
	НоваяСтрокаТЗ("БизнесПроцессы",          "Бизнес-процессы",
	БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          Ложь, ТЗ);
	НоваяСтрокаТЗ("Задачи",                  "Задачи",
	БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 Ложь, ТЗ);
	
	Возврат ТЗ;
КонецФункции

// Добавляет новую строку в таблицу значений видов объектов метаданных
// конфигурации.
//
// Параметры:
// Имя         - Строка - имя объекта метаданных или вида объекта метаданных.
// Синоним     - Строка  - синоним объекта метаданных.
// Картинка    - Картинка  - картинка поставленная в соответствие объекту метаданных или виду объекта метаданных.
// КартинкаОбъекта - Картинка - ссылка на картинку объекта
// ЭтоКоллекцияОбщие - Булево - признак того, что текущий элемент содержит подэлементы.
// Таблица	- ТаблицаЗначений - таблица в которую добавляются эти значения
//
&НаСервере
Процедура НоваяСтрокаТЗ(Имя, Синоним, Картинка, КартинкаОбъекта, ЭтоКоллекцияОбщие, Таблица)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	НоваяСтрока.ЭтоКоллекцияОбщие = ЭтоКоллекцияОбщие;
	
КонецПроцедуры

// Процедура - Дерево объектов метаданных заполнить
// заполняет дерево значений объектов Основной конфигурации.
//
&НаСервере
Процедура ДеревоОбъектовМетаданныхЗаполнить()
	
	// Создание предопределенных элементов.
	МетаданныеСиноним = ?(Метаданные.Синоним = "", Метаданные.Имя, Метаданные.Синоним);
	ПараметрыЭлемента = НовыйЭлементДереваОбъектовМетаданных(Метаданные.Имя, Метаданные.ПолноеИмя(), МетаданныеСиноним,
															ДеревоОбъектовМетаданных, 79, 79);
	ЭлементКонфигурация = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	ПараметрыЭлемента = НовыйЭлементДереваОбъектовМетаданных("Общие", "Общие", "Общие", ЭлементКонфигурация, 80, 80);
	ЭлементОбщие = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	// Заполнение дерева объектов метаданных.
	КоллекцииОбъектовМетаданных =  ТаблицаОбъектовМетаданных();
	Для Каждого Строка Из КоллекцииОбъектовМетаданных Цикл
		
		Если Метаданные[Строка.Имя].Количество() = 0 Тогда // нет объектов данной группы в основной конфигурации
			Продолжить;
		КонецЕсли;

		Если КоллекцияВыбираемыхОбъектовМетаданных.Количество() = 0
			Или КоллекцияВыбираемыхОбъектовМетаданных.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			
			Строка.Родитель = ?(Строка.ЭтоКоллекцияОбщие, ЭлементОбщие, ЭлементКонфигурация);
			
			Подсистемы = ?(Строка.Имя = "Подсистемы", Метаданные.Подсистемы, Неопределено);
			ДобавитьЭлементДереваОбъектовМетаданных(Строка, Подсистемы, Метаданные);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОбщие.ПолучитьЭлементы().Количество() = 0 Тогда
		ЭлементКонфигурация.ПолучитьЭлементы().Удалить(ЭлементОбщие);
	КонецЕсли;
	
КонецПроцедуры

// ============================Расширения=====================================
&НаКлиенте
Функция КоличествоПомеченныхРасширений()
	Кол = 0;
	Для каждого Эл Из СписокРасширений Цикл
		Если Эл.Пометка Тогда
			Кол = Кол + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Кол;
КонецФункции

// список всех расширений со Значением = Индекс расширения и пометкой первых КолРасширений
&НаСервере
Функция НовыйСписокРасширенийНаСервере( КолПомеченных = 999 )
	Список = Новый СписокЗначений;
	
	МассивРасширений = РасширенияКонфигурации.Получить();
	КолРасширений = МассивРасширений.Количество();
	КолПометка = 0;
	Для Индекс = 0 По КолРасширений - 1 Цикл
		
		Расширение = МассивРасширений[Индекс];
		
		Версия = ?(Расширение.Версия = "", "", " (" + Расширение.Версия + ")"); // версия
		Назначение = " - " + Строка(Расширение.Назначение);
		Синоним = ?(Расширение.Синоним = "", Расширение.Имя, Расширение.Синоним);
		Если КолПометка < КолПомеченных И Строка(Расширение.Назначение) = "Адаптация" Тогда
			КолПометка = КолПометка + 1;
			Пометка = Истина;
		Иначе
			Пометка = Ложь;
		КонецЕсли;
		Список.Добавить(Индекс, Синоним + Версия + Назначение, Пометка);
	КонецЦикла;
	
	Возврат Список;
КонецФункции

// Процедура - Дерево объектов метаданных расширения заполнить
// заполняет дерево значений объектов Расширения из массива расширений по <ИндексРасширения>
//
// Если список значений "Параметры.КоллекцииВыбираемыхОбъектовМетаданных" не пуст, тогда
// дерево будет ограничено переданным списком коллекций объектов метаданных.
//  Если объекты метаданных в сформированном дереве будут найдены в списке значений
// "Параметры.ВыбранныеОбъектыМетаданных", тогда они будут помечены, как выбранные.
//
// Параметры:
//  ИндексРасширения - Число - Индекс расширения в списке всех расширений
//
&НаСервере
Процедура ДеревоОбъектовМетаданныхРасширенияЗаполнить(Номер = 1, ИндексРасширения = 0 )
	
	МассивРасширений = РасширенияКонфигурации.Получить();
	Расширение = МассивРасширений[ИндексРасширения];
	ДвоичныеДанныеРасширения = Расширение.ПолучитьДанные();  // это пустое расширение
	Если ДвоичныеДанныеРасширения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получим конфигурацию метаданных расширения
	МетаРасширения = Новый ОбъектМетаданныхКонфигурация(ДвоичныеДанныеРасширения);
	
	// Создание предопределенных элементов.
	Версия = ?(Расширение.Версия = "", "", "(" + Расширение.Версия + ")");
	Назначение = " - " + Строка(Расширение.Назначение);
	Синоним = ?(МетаРасширения.Синоним = "", МетаРасширения.Имя, МетаРасширения.Синоним) + Версия + Назначение;
	ПараметрыЭлемента = НовыйЭлементДереваОбъектовМетаданных(МетаРасширения.Имя, МетаРасширения.ПолноеИмя(), Синоним,
															ЭтаФорма["ДеревоОбъектовМетаданных" + Строка(Номер)], 79, 79);
	ЭлементКонфигурация = НоваяСтрокаДерева(ПараметрыЭлемента);
	ПараметрыЭлемента = НовыйЭлементДереваОбъектовМетаданных("Общие", "Общие", "Общие", ЭлементКонфигурация, 80, 80);
	ЭлементОбщие = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	// Заполнение дерева объектов метаданных.
	ГруппыОбъектовМетаданных = ТаблицаОбъектовМетаданных();
	Для Каждого Строка Из ГруппыОбъектовМетаданных Цикл
		
		Если МетаРасширения[Строка.Имя].Количество() = 0 Тогда // нет объектов данной группы в расширении
			Продолжить;
		КонецЕсли;
		
		Если КоллекцияВыбираемыхОбъектовМетаданных.Количество() = 0
			Или КоллекцияВыбираемыхОбъектовМетаданных.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			Строка.Родитель = ?(Строка.ЭтоКоллекцияОбщие, ЭлементОбщие, ЭлементКонфигурация);
			Подсистемы = ?(Строка.Имя = "Подсистемы", МетаРасширения.Подсистемы, Неопределено);
			ДобавитьЭлементДереваОбъектовМетаданных(Строка, Подсистемы, МетаРасширения);
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОбщие.ПолучитьЭлементы().Количество() = 0 Тогда
		ЭлементКонфигурация.ПолучитьЭлементы().Удалить(ЭлементОбщие);
	КонецЕсли;
	
КонецПроцедуры

// Функция - Новый элемент дерева объектов метаданных
//
// Параметры:
//  Имя				 - Строка -  Имя элемента
//  ПолноеИмя		 - Строка -  Полное Имя элемента
//  Синоним			 - Строка -  Синоним
//  Родитель		 - СтрокаДерева, Неопределено -  если есть, то родительский элемент
//  Картинка		 - Число - код картинки
//  КартинкаОбъекта	 - Число - код картинки Объекта
//  Пометка			 - Булево - отметка
// 
// Возвращаемое значение:
//  Структура - с тактми же полями
//
Функция НовыйЭлементДереваОбъектовМетаданных(Имя, ПолноеИмя, Синоним, Родитель, 
											Картинка = 0, КартинкаОбъекта = 0, Пометка = Ложь)
	СтруктураЭлементаДерева = Новый Структура("Имя, ПолноеИмя, Синоним", Имя, ПолноеИмя, Синоним);
	СтруктураЭлементаДерева.Вставить("Родитель", Родитель);
	
	СтруктураЭлементаДерева.Вставить("Картинка", Картинка);
	СтруктураЭлементаДерева.Вставить("КартинкаОбъекта", КартинкаОбъекта);
	СтруктураЭлементаДерева.Вставить("Пометка", Пометка);
	
	Возврат СтруктураЭлементаДерева;
КонецФункции

&НаСервере
Функция ПустаяПодсистема(Подсистемы, ПараметрыЭлемента)
	Возврат ( (Подсистемы <> Неопределено  И Параметры.Свойство("ТолькоПодсистемыСКИ") 
		И Не ПустаяСтрока(ПараметрыЭлемента.ПолноеИмя) 
		И ЭлементыПодсистемСКоманднымИнтерфейсом.НайтиПоЗначению(ПараметрыЭлемента.ПолноеИмя) = Неопределено) )
	// Если нет ни одного объекта метаданных из нужной ветки. 
	// Например, нет ни одного регистра бухгалтерии,
	// то корень "Регистры бухгалтерии" добавлять не нужно.
	Или (Подсистемы = Неопределено И Метаданные[ПараметрыЭлемента.Имя].Количество() = 0);
КонецФункции

// Функция - Добавить элемент дерева объектов метаданных
// Добавляет новую строку в дерево значений формы (дерево),
// а также заполняет полный набор строк из метаданных по переданному параметру.
// Если параметр Подсистемы заполнен, то вызывается рекурсивно для всех дочерних подсистем.
//
// Параметры:
//  ПараметрыЭлемента	 - Структура - Структура с полями:
//     Имя           - имя родительского элемента.
//     Синоним       - синоним родительского элемента.
//     Пометка       - начальная пометка коллекции или объекта метаданных.
//     Картинка      - код картинки родительского элемента.
//     КартинкаОбъекта - код картинки подэлемента.
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента.
//   Подсистемы  - Строка - если заполнен, то содержит значение Метаданные.Подсистемы (коллекцию элементов).
//   Проверять   - Булево- Булево - признак проверки на принадлежность родительским подсистемам.
// 
// Возвращаемое значение:
//  Строка - Строка дерева объектов метаданных.
//
&НаСервере
Функция ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, Подсистемы = Неопределено, МетаданныеКонфИлиРасширения = Неопределено)
	
	// Проверка на наличие командного интерфейса только в листьях дерева.
	Если ПустаяПодсистема(Подсистемы, ПараметрыЭлемента) Тогда // см. выше
		Возврат Неопределено;
	КонецЕсли;
	
	Если Подсистемы = Неопределено Тогда
		РодТипМетаданных = НоваяСтрокаДерева(ПараметрыЭлемента, Ложь);
		
		Для Каждого Эл Из МетаданныеКонфИлиРасширения[ПараметрыЭлемента.Имя] Цикл
			ПараметрыЭлементаДерева = НовыйЭлементДереваОбъектовМетаданных(Эл.Имя, Эл.ПолноеИмя(), Эл.Синоним, РодТипМетаданных,
								ПараметрыЭлемента.Картинка, ПараметрыЭлемента.КартинкаОбъекта);
			НоваяСтрокаДерева(ПараметрыЭлементаДерева, Истина);
		КонецЦикла;
		
		Возврат РодТипМетаданных;
	КонецЕсли;
	
	// Если нет ни одной подсистемы, то корень "Подсистемы" добавлять не нужно.
	Если Подсистемы.Количество() = 0 И ПараметрыЭлемента.Имя = "Подсистемы" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоЭлемент = Подсистемы <> Неопределено И Подсистемы <> МетаданныеКонфИлиРасширения.Подсистемы;
	НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, ЭтоЭлемент);
	
	Для Каждого Эл Из Подсистемы Цикл
		ПараметрыЭлементаДерева = НовыйЭлементДереваОбъектовМетаданных(Эл.Имя, Эл.ПолноеИмя(), Эл.Синоним,
							НоваяСтрока, Эл.Картинка, Эл.КартинкаОбъекта);
		ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлементаДерева, Эл.Подсистемы, МетаданныеКонфИлиРасширения);
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция НоваяСтрокаДерева(ПарамСтроки, ЭтоЭлементМетаданных = Ложь)
	
	Коллекция = ПарамСтроки.Родитель.ПолучитьЭлементы();
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Имя                 = ПарамСтроки.Имя;
	НоваяСтрока.Представление       = ?(ЗначениеЗаполнено(ПарамСтроки.Синоним), 
	// ?(ПарамСтроки.Имя <> ПарамСтроки.Синоним, ПарамСтроки.Имя + "(" + ПарамСтроки.Синоним + ")", ПарамСтроки.Синоним)
		ПарамСтроки.Синоним, ПарамСтроки.Имя);
	Пометка = ?(ВыбранныеОбъектыМетаданных.НайтиПоЗначению(ПарамСтроки.ПолноеИмя) = Неопределено, 0, 1);
	НоваяСтрока.Пометка             = Пометка;
	НоваяСтрока.Картинка            = ПарамСтроки.Картинка;
	НоваяСтрока.ПолноеИмя           = ПарамСтроки.ПолноеИмя;
	НоваяСтрока.ЭтоОбъектМетаданных = ЭтоЭлементМетаданных;
	
	Если НоваяСтрока.ЭтоОбъектМетаданных 
		И НоваяСтрока.ПолноеИмя = НачальноеЗначениеВыбора Тогда
		ИдентификаторТекущейСтрокиПриОткрытии = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Процедура рекурсивно устанавливает/снимает пометку для родителей передаваемого элемента.
//
// Параметры:
// Элемент    - ДанныеФормыКоллекцияЭлементовДерева - Элемент дерева
//
&НаКлиенте
Процедура ПометитьЭлементыРодителей(Элемент)
	Пометка2 = 2; // ЕстьПомеченные И ЕстьНепомеченные
	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Родитель.ПолучитьИдентификатор();
	Элементы.ДеревоОбъектовМетаданных.Развернуть(ИдентификаторСтроки);
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Элемент.Пометка = Пометка2 Тогда
		Родитель.Пометка = Пометка2;
	Иначе
		Родитель.Пометка = ЗначениеПометкиЭлементов(ЭлементыРодителя);
	КонецЕсли;
	
	ПометитьЭлементыРодителей(Родитель);
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПометкиЭлементов(ЭлементыРодителя)
	Пометка2 = 2; // ЕстьПомеченные И ЕстьНепомеченные
	ЕстьПомеченные   = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = Пометка2 
			ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные   = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные   = ЕстьПомеченные   ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементов(ВложенныеЭлементы);
			ЕстьПомеченные   = (ЕстьПомеченные   ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов);
			ЕстьНепомеченные = (ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ?(ЕстьПомеченные И ЕстьНепомеченные, 2, ?(ЕстьПомеченные, 1, 0));
	
КонецФункции

&НаСервере
Процедура ПометитьЭлементыРодителейНаСервере(Элемент)
	Пометка2 = 2; // ЕстьПомеченные И ЕстьНепомеченные
	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Элемент.Пометка = Пометка2 Тогда
		Родитель.Пометка = Пометка2;
	Иначе
		Родитель.Пометка = ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя);
	КонецЕсли;
	
	ПометитьЭлементыРодителейНаСервере(Родитель);
	
КонецПроцедуры

&НаСервере
Функция ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя)
	Пометка2 = 2; // ЕстьПомеченные И ЕстьНепомеченные
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = Пометка2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементовНаСервере(ВложенныеЭлементы);
			ЕстьПомеченные   = ЕстьПомеченные ИЛИ ЭлементРодителя.Пометка ИЛИ ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Пометка1 = ?(ЕстьПомеченные, 1, 0);
	Возврат ?(ЕстьПомеченные И ЕстьНепомеченные, Пометка2, Пометка1);
КонецФункции

// Процедура - Начальная пометка коллекций
// Процедура НачальнаяПометкаКоллекций устанавливает пометку для коллекций
// объектов метаданных, которые не имеют объектов метаданных (истина) и 
// которые имеют объекты метаданных с заданной пометкой.
//
// Параметры:
// Родитель - ДанныеФормыКоллекцияЭлементовДерева - Родительский элемент
//
Процедура НачальнаяПометкаКоллекций(Родитель)
	
	ВложенныеЭлементы = Родитель.ПолучитьЭлементы();
	
	Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		Если ВложенныйЭлемент.Пометка Тогда
			ПометитьЭлементыРодителейНаСервере(ВложенныйЭлемент);
		КонецЕсли;
		НачальнаяПометкаКоллекций(ВложенныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Получение данных
// Процедура для заполнения списка выбранных элементов дерева.
//
// Параметры:
//  Родитель - ДанныеФормыЭлементДерева - родительский элемент дерева
//
&НаСервере
Процедура ПолучениеДанных(Родитель = Неопределено)
	
	Родитель = ?(Родитель = Неопределено, ДеревоОбъектовМетаданных, Родитель);
	
	КоллекцияЭлементов = Родитель.ПолучитьЭлементы();
	
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		Если Элемент.Пометка = 1 И Не ПустаяСтрока(Элемент.ПолноеИмя) Тогда
			ВыбранныеОбъектыМетаданных.Добавить(Элемент.ПолноеИмя);
		КонецЕсли;
		ПолучениеДанных(Элемент);
	КонецЦикла;
	
КонецПроцедуры

// поиск и пометка элементов в другом дереве основной конфигурации
&НаКлиенте
Процедура ПоискИПометкаВДругомДереве(ТекущиеДанные, ПоискВДеревеКонфигурации = Истина)
	
	// ------ при выборе всей конфигурации - так не будет ------------- 
	РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
	ИмяЭлемента0 = ?(РодительЭлемента = Неопределено, "", РодительЭлемента.Имя);
	
	ЭлементыДерева = Новый Массив;
	Если РодительЭлемента <> Неопределено// НЕ вся конфигурация (расш)
		Или ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда // конечный элемент
		ЭлементыДерева.Добавить( ТекущиеДанные );
	Иначе
		ЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
	КонецЕсли;
	
	Для каждого Элемент1 Из ЭлементыДерева Цикл
		Элементы2 = Элемент1.ПолучитьЭлементы();
		
		Если Элементы2.Количество() = 0 Тогда
			ПометитьЭлементыВДругомДереве(Элемент1.Имя, Элемент1.Пометка, ИмяЭлемента0, ПоискВДеревеКонфигурации);
		Иначе // 2-ой уровень
			Для каждого Элемент2 Из Элементы2 Цикл
				Элементы3 = Элемент2.ПолучитьЭлементы();
				Если Элементы3.Количество() = 0 Тогда
					ПометитьЭлементыВДругомДереве(Элемент2.Имя, Элемент2.Пометка, Элемент1.Имя, ПоискВДеревеКонфигурации);
				Иначе  // 3-ий уровень
					Для каждого Элемент3 Из Элементы3 Цикл
						ПометитьЭлементыВДругомДереве(Элемент3.Имя, Элемент3.Пометка, Элемент2.Имя, ПоискВДеревеКонфигурации);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьЭлементыВДругомДереве(ЭлИмя, ЭлПометка, ИмяРодителя = "", ПоискВДеревеКонфигурации = Истина)
	
	Если ПоискВДеревеКонфигурации Тогда
		Дерево = ЭтаФорма["ДеревоОбъектовМетаданных"];
	Иначе
		Дерево = ЭтаФорма["ДеревоОбъектовМетаданных1"];
	КонецЕсли;
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	
	Для каждого ЭлКонфигурации Из ЭлементыДерева Цикл // поиск на этом уровне
		ЭлементДругогоДерева = Неопределено;
		
		ЭлементыГрупп = ЭлКонфигурации.ПолучитьЭлементы();
		Для каждого ЭлГруппы Из ЭлементыГрупп Цикл
			
			// Поиск Родителя в Группе
			Если ИмяРодителя = ЭлГруппы.Имя Тогда // на 1 уровне
				
				ЭлементыОбъектов = ЭлГруппы.ПолучитьЭлементы();
				Для каждого ЭлОбъекта Из ЭлементыОбъектов Цикл // поиск на 2 уровне
					Если ЭлОбъекта.Имя = ЭлИмя Тогда // на 1 уровне
						ЭлементДругогоДерева = ЭлОбъекта;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЭлементДругогоДерева <> Неопределено Тогда
					ЭлементДругогоДерева.Пометка = ЭлПометка;
					ПометкаПриИзменении(ЭлементДругогоДерева);
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; // ЭлГруппы
		
		Если ЭлементДругогоДерева = Неопределено Тогда
			Для каждого ЭлГруппы Из ЭлементыГрупп Цикл
				
				ЭлементыПодГрупп = ЭлГруппы.ПолучитьЭлементы();
				Для каждого ЭлПодГруппы Из ЭлементыПодГрупп Цикл // поиск на 2 уровне
					
				// Поиск Родителя в под-Группе
					Если ИмяРодителя = ЭлПодГруппы.Имя Тогда // на 2 уровне
						
						ЭлементыОбъектов = ЭлПодГруппы.ПолучитьЭлементы();
						Для каждого ЭлОбъекта Из ЭлементыОбъектов Цикл // поиск на 2 уровне
							Если ЭлОбъекта.Имя = ЭлИмя Тогда // на 1 уровне
								ЭлементДругогоДерева = ЭлОбъекта;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ЭлементДругогоДерева <> Неопределено Тогда
							ЭлементДругогоДерева.Пометка = ЭлПометка;
							ПометкаПриИзменении(ЭлементДругогоДерева);
							Прервать;
						КонецЕсли;

					КонецЕсли;
					
				КонецЦикла; // ЭлПодГруппы
				
				Если ЭлементДругогоДерева <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; // ЭлГруппы
		КонецЕсли;
		
		// и так по всем расширениям, может быть несколько Справочников - Номенклатура
		
	КонецЦикла; // ЭлКонфигурации
	
КонецПроцедуры

#КонецОбласти

#Область КодированиеДанных

// Функция - Сгенерированное изображение
//           Формирует на основании текстового описания в формате UML изображение, содержащее UML - диаграмму
//           Формат описания см. https://plantuml.com/ru/
// Параметры:
//  Данные		 - Строка	  -  текстовое описание диаграммы
//  Параметры	 - Структура  -  Параметры доступа к серверу рендеринга ( см. функцию ПараметрыПоУмолчанию)
// 
// Возвращаемое значение:
//  Структура - содержащая
//				ОтветСервера      - HTTPОтвет - Данные, полученные от сервера рендеринга
//				АдресИзображения  - Строка - Адрес во временном хранилище, содержащее данные изображения
//
Функция СгенерированноеИзображение(Данные, Параметры) 
	
	ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(Данные);
	СжатыеДанные = СжатыеДанные(ДвоичныеДанныеСтроки);
	Base64Строка = Base64Строка(СжатыеДанные);
	ФорматPlantUML = ФорматPlantUML(Base64Строка);
	Соединение = Новый HTTPСоединение(Параметры.СерверРендеринга, , , , , Параметры.ТаймаутСоединения);
	ТекстЗапроса = РесурсСервера + ФорматPlantUML;
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = Соединение.Получить(Запрос);

	// ответ  не анализируется - при необходимости нужно дописать его анализ
	ДвоичныеДанныеКартинки = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Результат = Новый Структура;
	Результат.Вставить("ОтветСервера", Ответ);
	Результат.Вставить("АдресИзображения", ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки));

	Возврат Результат;

КонецФункции // ()

Функция GZipHeader()

	Возврат 10;

КонецФункции

Функция GZipFooter()

	Возврат 8;

КонецФункции

Функция ЗаписатьZip(Данные)

#Если МобильноеПриложениеСервер Тогда
	ВызватьИсключение(НСтр("ru = 'Работа с Zip-файлами в мобильной платформе не поддерживается'"));
#Иначе
	ВременныйФайл = ПолучитьИмяВременногоФайла(".bin");
	Данные.Записать(ВременныйФайл);
	ПотокZip = Новый ПотокВПамяти;
	ЗаписьZip = Новый ЗаписьZipФайла(ПотокZip);
	ЗаписьZip.Добавить(ВременныйФайл);
	ЗаписьZip.Записать();
	УдалитьФайлы(ВременныйФайл);

	Возврат ПотокZip.ЗакрытьИПолучитьДвоичныеДанные();
#КонецЕсли

КонецФункции

Функция СжатыеДанные(Данные) 

	ЧтениеДанных = Новый ЧтениеДанных(ЗаписатьZip(Данные));

	НачальноеСмещение = 14;
	ЧтениеДанных.Пропустить(НачальноеСмещение);
	CRC32 = ЧтениеДанных.ПрочитатьЦелое32();

	РазмерСжатыхДанных = ЧтениеДанных.ПрочитатьЦелое32();
	РазмерИсходныхДанных = ЧтениеДанных.ПрочитатьЦелое32();

	РазмерИмениФайла = ЧтениеДанных.ПрочитатьЦелое16();
	РазмерДополнительногоПоля = ЧтениеДанных.ПрочитатьЦелое16();
	ЧтениеДанных.Пропустить(РазмерИмениФайла + РазмерДополнительногоПоля);

	ПотокGZip = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(ПотокGZip);
	ЧтениеДанных.КопироватьВ(ЗаписьДанных, РазмерСжатыхДанных);
	
	Возврат ПотокGZip.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции

Функция ФорматPlantUML(Данные) 
	
	Результат = "";
	СтрокаИскомая	  = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	СтрокаПодстановки = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_"; 
	Для Счетчик = 0 По СтрДлина(Данные) - 1 Цикл     
		ТекСимвол = Сред(Данные, счетчик + 1, 1);
		Поз = СтрНайти(СтрокаИскомая, ТекСимвол); 
		Если ТекСимвол = Символы.ПС ИЛИ ТекСимвол = Символы.ВК Тогда
		   Продолжить;
		КонецЕсли;
		Если Поз > 0  Тогда
			Результат = Результат + Сред(СтрокаПодстановки, Поз, 1);
		Иначе
			Результат = Результат + ТекСимвол; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;   
	
КонецФункции 

#КонецОбласти

#Область ФормированиеКодаДиаграммы

&НаСервере
Процедура СгенерироватьКодНаСервере()

	Если СтандартнаяСхема Тогда
		ИсходныйКодПодключаемойБиблиотеки = "";
	КонецЕсли;
	
	СборкаКода = Новый Массив;
	СборкаКода.Добавить(ИсходныйКодПодключаемойБиблиотеки);
	
	СборкаВзаимосвязей = Новый Массив;

	ВыбранныеОбъектыМетаданных.Очистить();
	ПолучениеДанных();

// Получаем массив метаданных расширений
	МассивРасширений = РасширенияКонфигурации.Получить();
	МассивМетаданныхРасширений = Новый Массив;
	Для Каждого ЭлементМассива Из МассивРасширений Цикл // Аназируем от обратного т.е. смотрим во все расширения
		ДвоичныеДанныеРасширения = ЭлементМассива.ПолучитьДанные();  // это пустое расширение
		Если ДвоичныеДанныеРасширения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МетаданныеРасширения = Новый ОбъектМетаданныхКонфигурация(ДвоичныеДанныеРасширения); // Получим конфигурацию метаданных расширения
		МассивМетаданныхРасширений.Добавить(МетаданныеРасширения);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из ВыбранныеОбъектыМетаданных Цикл
		
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ЭлементСписка.Значение);
		
		МассивИмен = СтрРазделить(ЭлементСписка.Значение, ".");
		
		Если МетаданныеОбъекта = Неопределено
			Или МассивИмен.Количество() = 1 Тогда  // группа объектов "Общие", "Справочники" и и.д.
			Продолжить;
		КонецЕсли;
				
		ТипМета = МассивИмен[0];
		Если СтандартнаяСхема Тогда
			Префикс = ТипКласса(ТипМета) + " " + ТипМета + ".";
		Иначе
			Префикс = "_" + ТипМета;
		КонецЕсли;
		СтрокаМетаданные = СформироватьСтрокуМетаданных(Префикс, МетаданныеОбъекта, СтандартнаяСхема);
		
		ДополнитьОписаниемКоллекции(СтрокаМетаданные, МетаданныеОбъекта, СборкаВзаимосвязей,
			ВыбранныеОбъектыМетаданных, ТипМета );
 
		СборкаКода.Добавить(СтрокаМетаданные);

	КонецЦикла;
	
	СборкаКода.Добавить(СтрСоединить(СборкаВзаимосвязей, Символы.ПС));
	ИсходныйКод = СтрСоединить(СборкаКода, Символы.ПС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСтрокуМетаданных(СтрокаТипа, МетаданныеОбъекта, СтандартнаяСхема = Истина)
	
	Попытка // 06.10.2024
		ОбъектИмя = МетаданныеОбъекта.Имя;
		ОбъектСиноним = ?(МетаданныеОбъекта.Синоним = "", ОбъектИмя, МетаданныеОбъекта.Синоним);
	Исключение
		ОбъектИмя = Строка(МетаданныеОбъекта);
		ОбъектСиноним = ОбъектИмя;
	КонецПопытки;
		
	Если СтандартнаяСхема Тогда
		Возврат СтрШаблон("%1%2", СтрокаТипа, ОбъектИмя);
	Иначе
		Возврат СтрШаблон("%1(%2, ""%3"")", СтрокаТипа, ОбъектИмя , ОбъектСиноним);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДополнитьОписаниемКоллекции(СтрокаМетаданные, МетаданныеОбъекта, СборкаВзаимосвязей, 
				ВыбранныеОбъектыМетаданных, ТипМета)
	Если НЕ ЗначениеЗаполнено(СтрокаМетаданные) Тогда // Общие
		Возврат;
	КонецЕсли;
	
	СборкаСтроки = Новый Массив;
	
	Если ФормироватьРеквизитныйСоставОбъектов Тогда
		СборкаСтроки.Добавить(СтрШаблон("%1 {", СтрокаМетаданные));
	КонецЕсли;

	// Временная переменная для упрощения работы с функциями
	ДопПараметры = Новый Структура("МетаданныеОбъекта, СборкаВзаимосвязей, ВыбранныеОбъектыМетаданных",
									МетаданныеОбъекта, СборкаВзаимосвязей, ВыбранныеОбъектыМетаданных);
	ДопПараметры.Вставить("Префикс", "");
	
	Если ЕстьСтандартныеРеквизиты(ТипМета) Тогда // ЕстьСтандартныеРеквизиты
		ДопПараметры.Вставить("Префикс", "{static} "); // {static}  - нижнее подчёркивание
		ДополнитьОписаниеЭлементаПоКоллекции(МетаданныеОбъекта.СтандартныеРеквизиты, СборкаСтроки, ДопПараметры);
		ДопПараметры.Вставить("Префикс", "");
	КонецЕсли;
	
	Если ЭтоРегистр(ТипМета) Тогда  // все регистры одинаково обрабатываем
		
		ДополнитьОписаниеЭлементаРегистра("Измерения", СборкаСтроки, ДопПараметры);
		ДополнитьОписаниеЭлементаРегистра("Ресурсы", СборкаСтроки, ДопПараметры);
		ДополнитьОписаниеЭлементаРегистра("Реквизиты", СборкаСтроки, ДопПараметры);
		
	ИначеЕсли НетРеквизитов(ТипМета) Тогда 
		// НЕТРеквизитов 
		
	Иначе
		ПутьКоллекция = ?(ТипМета = "Перечисление", "ЗначенияПеречисления", "Реквизиты");
		Коллекция = МетаданныеОбъекта[ПутьКоллекция];
		ДополнитьОписаниеЭлементаПоКоллекции(Коллекция, СборкаСтроки, ДопПараметры);
		
	КонецЕсли;
	
	Если ЕстьТабличныеЧастиУОбъекта(ТипМета) Тогда // Объекты, у которых есть ТабличныеЧасти
		Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			СборкаСтроки.Добавить(СтрШаблон("%1---%2---", Символы.Таб, ТабличнаяЧасть.Имя));
			ДополнитьОписаниеЭлементаПоКоллекции(ТабличнаяЧасть.Реквизиты, СборкаСтроки, ДопПараметры);
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьХарактеристики(ТипМета) Тогда
		ДополнитьОписаниеЭлементаРегистра("!Характеристики", СборкаСтроки, ДопПараметры);
	КонецЕсли;
	
	Если СтрНайти(ТипМета, "ПланОбмена") > 0 Тогда
		ДополнитьОписаниеЭлементаРегистра("!Состав", СборкаСтроки, ДопПараметры);
	КонецЕсли;
	Если СтрНайти(ТипМета, "WebСервис") > 0 Тогда
		ДополнитьОписаниеЭлементаРегистра("!Операции", СборкаСтроки, ДопПараметры);
	КонецЕсли;
	Если СтрНайти(ТипМета, "HTTPСервис") > 0 Тогда
		ДополнитьОписаниеЭлементаРегистра("!Шаблоны", СборкаСтроки, ДопПараметры);
	КонецЕсли;

	Если СтрНайти(ТипМета, "Задача") > 0 Тогда
		ДополнитьОписаниеЭлементаРегистра("!Адресация", СборкаСтроки, ДопПараметры);
	КонецЕсли;

	Если ФормироватьРеквизитныйСоставОбъектов Тогда
		СборкаСтроки.Добавить("}");
		СтрокаМетаданные = СтрСоединить(СборкаСтроки, Символы.ПС);
	КонецЕсли;
	
	// Обратное распакопка из структуры ДопПараметров:
	//	МетаданныеОбъекта = не менялись, а 2 других поля - ДА !
	СборкаВзаимосвязей = ДопПараметры.СборкаВзаимосвязей;
	ВыбранныеОбъектыМетаданных = ДопПараметры.ВыбранныеОбъектыМетаданных;
	
КонецПроцедуры 

// Процедура - Дополнить описание элемента по коллекции
//
// Параметры:
//  Коллекция	 - Структура - коллекция Объектов
//  СборкаСтроки - Массив - массив строк для сборки
//  Парам		 - Структура - {СборкаВзаимосвязей, МетаданныеОбъекта, ВыбранныеОбъектыМетаданных, Префикс}
//
&НаСервере
Процедура ДополнитьОписаниеЭлементаПоКоллекции(Коллекция, СборкаСтроки, Парам)

	Для Каждого Элемент Из Коллекция Цикл

		Попытка
			ТипДанных = Неопределено;
			ТипыЭлемента = Элемент.Тип.Типы();
		Исключение
			ТипыЭлемента = Новый Массив;
		КонецПопытки;
			
		Префикс2 = "";
		Если ФормироватьРеквизитныйСоставОбъектов Тогда
				Если ТипыЭлемента.Количество() = 1 Тогда
					ТипДанных = ТипыЭлемента[0];
					Префикс2 = ПрефиксПоТипу(ТипДанных);
				КонецЕсли;
			Префикс2 = Префикс2 + Парам.Префикс;
			СборкаСтроки.Добавить(СтрШаблон("%1 %2%3", Символы.Таб, Префикс2, Элемент.Имя));
		КонецЕсли;
		
		Если ТипыЭлемента.Количество() = 1 И Лев(Префикс2, 1) = "-" Или ТипыЭлемента.Количество() > 1 Тогда
			ДополнитьВзаимосвязи(Элемент.Имя, ТипыЭлемента, Парам);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Процедура - Дополнить взаимосвязи
//
// Параметры:
//  Имя			 - Строка - Имя метаданныъ
//  ТипыДанных	 - Массив	 - Массив типов данных
//  Парам		 - Структура - {СборкаВзаимосвязей, МетаданныеОбъекта, ВыбранныеОбъектыМетаданных, Префикс}
//
&НаСервере
Процедура ДополнитьВзаимосвязи(Имя, ТипыДанных, Парам)
	Если Имя = "Ссылка" Или Имя = "Родитель" Тогда
		Возврат; // ссылка на самого-себя не красиво делает петлю - "и так понятно"
	КонецЕсли;
	
	ТипИИмяОбъекта = Парам.МетаданныеОбъекта.ПолноеИмя();  // .Имя() не содержит Тип метаданных
	Для Каждого ТипДанных Из ТипыДанных Цикл
		
		Если НЕ ЭтоСсылка(ТипДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеСвязи = Метаданные.НайтиПоТипу(ТипДанных);
		Если МетаданныеСвязи = Неопределено Тогда Возврат КонецЕсли;
		
		ТипИИмяСвязи = МетаданныеСвязи.ПолноеИмя();
		
		Если ВсеПодчиненныеЭлементы  // +++ OS 19.09.2024 поиск всех зависимых элементов
			Или ВыбранныеОбъектыМетаданных.НайтиПоЗначению(ТипИИмяСвязи) <> Неопределено Тогда
			
			Если ВсеПодчиненныеЭлементы Тогда // нужен класс и его тип, повторное объявление
				мЧасти = СтрРазделить(ТипИИмяСвязи, ".");
				ПрефиксОбъекта = ПрефиксОбъекта(мЧасти[0]);
				ТипИмяКласса = ПрефиксОбъекта + " " + ТипИИмяСвязи;
				Если Парам.СборкаВзаимосвязей.Найти(ТипИмяКласса) = Неопределено Тогда // без повторов
					Парам.СборкаВзаимосвязей.Добавить(ТипИмяКласса);
				КонецЕсли;
			КонецЕсли;
				
			Если ФормироватьДетальныеОтношенияНаУровнеРеквизитов Тогда
				Парам.СборкаВзаимосвязей.Добавить(СтрШаблон("%1 --> %2::%3", ТипИИмяСвязи, ТипИИмяОбъекта, Имя));
			Иначе
				Если МетаданныеСвязи.Имя = Парам.МетаданныеОбъекта.Имя Тогда
					Продолжить;
				КонецЕсли;
				СтрокаВзаимосвязь = СтрШаблон("%1 --> %2", ТипИИмяСвязи, ТипИИмяОбъекта);
				Если Парам.СборкаВзаимосвязей.Найти(СтрокаВзаимосвязь) = Неопределено Тогда
					Парам.СборкаВзаимосвязей.Добавить(СтрокаВзаимосвязь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеСхемыКода

&НаСервере
Функция ТипКласса(ТипМета = "")
	Табл = ЭтаФорма.ТаблицаПрефиксов;
	
	Строки = Табл.НайтиСтроки(Новый Структура("ТипМетаданных", ТипМета));
	Если Строки = Неопределено Или Строки.Количество() = 0 Тогда
		ПрефиксКласса = ПрефиксПоУмолчанию(Табл);
	Иначе
		ПрефиксКласса = Строки[0].Префикс;
	КонецЕсли;
	
	Возврат ПрефиксКласса;
КонецФункции

&НаКлиенте
Процедура ФормироватьРеквизитныйСоставОбъектовПриИзменении(Элемент)

	ОбновитьДоступностьФлажковШаг2(ЭтаФорма);
	Если НЕ ФормироватьРеквизитныйСоставОбъектов Тогда
		ФормироватьДетальныеОтношенияНаУровнеРеквизитов = Ложь;
		ВсеПодчиненныеЭлементы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СгенерироватьНаСервере()
	
	ПараметрыПоУмолчанию = ПараметрыПоУмолчанию();
	ЗаполнитьЗначенияСвойств(ПараметрыПоУмолчанию, ЭтаФорма);
	Результат = СгенерированноеИзображение(ИсходныйКод, ПараметрыПоУмолчанию);
	
	Если ЗначениеЗаполнено(Результат.АдресИзображения) Тогда
	 	РезультатОбработки = Результат.АдресИзображения;
	КонецЕсли; 
	
КонецПроцедуры

// Функция - Это ссылка
// Проверка того, что переданный тип является ссылочным типом данных.
// Для типа "Неопределено" возвращается Ложь.
//
// Параметры:
//  Тип	 - ТипЗначения - тип 1С
// 
// Возвращаемое значение:
//  Булево - Да/Нет
//
&НаСервереБезКонтекста
Функция ЭтоСсылка(Тип)
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Массив.Добавить(Тип("Число"));
	Массив.Добавить(Тип("Булево"));
	Массив.Добавить(Тип("Дата"));
	Массив.Добавить(Тип("Неопределено"));
	
	// +++ ещё типы - не ссылки
	Массив.Добавить(Тип("ОписаниеТипов"));
	Массив.Добавить(Тип("ВидДвиженияНакопления"));
	
	Массив.Добавить(Тип("ХранилищеЗначения"));
	Массив.Добавить(Тип("УникальныйИдентификатор"));
	Массив.Добавить(Тип("Массив"));
	Массив.Добавить(Тип("СписокЗначений"));
	Массив.Добавить(Тип("ТаблицаЗначений"));
	Массив.Добавить(Тип("ДеревоЗначений"));
	
	Массив.Добавить(Тип("Картинка"));
	Массив.Добавить(Тип("КомпоновщикНастроекКомпоновкиДанных"));
	Массив.Добавить(Тип("СтандартныйПериод"));

	Возврат (Массив.Найти( Тип ) = Неопределено );
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрефиксПоТипу(Тип)
	Префикс = ""; // пустой префикс
	
	Если ЭтоСсылка(Тип) Тогда
		Префикс = "-"; // красный квадратик
	Иначе
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(Тип("Булево"), "#"); // желтый ромбик
		Соответствие.Вставить(Тип("Дата"),   "~"); // синий треугольник
		Соответствие.Вставить(Тип("Число"),  "*"); // черная точка
		Соответствие.Вставить(Тип("Строка"), "+"); // зелёный кружок
		Префикс = Соответствие.Получить(Тип);
		Если Префикс = Неопределено Тогда
			Префикс = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Префикс;
КонецФункции

&НаСервере
Процедура ДополнитьОписаниеЭлементаРегистра(ИмяМета, СборкаСтроки, Парам)
	МассивСтрок = Новый Массив;
	
	Если лев(ИмяМета, 1) = "!" Тогда  // нестандартные коллекции
		ИмяМета = сред(ИмяМета, 2);
		
		Коллекция = Новый Массив;
		Если ИмяМета = "Характеристики" Тогда
			Для каждого Эл Из Парам.МетаданныеОбъекта.Характеристики Цикл
				ЭлВид = Эл.ВидыХарактеристик;
				Попытка
					ХарактеристикиТип = Новый ОписаниеТипов("ПланВидовХарактеристикМенеджер." + ЭлВид.Имя);
					СтруктураХарактеристики = Новый Структура("Имя, Тип", ЭлВид.Имя, ХарактеристикиТип );
					Коллекция.Добавить(СтруктураХарактеристики);
				
					СтруктураХарактеристики = Новый Структура("Имя, Тип", Эл.ПолеЗначения.Имя, ЭлВид.Тип );
					Коллекция.Добавить(СтруктураХарактеристики);
				Исключение
					// то же самое, что и Табличная часть, а не ПВХ, характеристики НЕ НУЖНО отборажать
				КонецПопытки;
			КонецЦикла;
			
		ИначеЕсли ИмяМета = "Адресация" Тогда
			Адресация = Парам.МетаданныеОбъекта.Адресация;
			Если Адресация = Неопределено Тогда
				Возврат;
			КонецЕсли;
			АдресацияИмя = "РегистрСведений." + Адресация.Имя;
			АдресацияТип = Новый ОписаниеТипов("РегистрСведенийМенеджер." + Адресация.Имя);
			СтруктураКоллекции = Новый Структура("Имя, Тип", АдресацияИмя, АдресацияТип);
			Коллекция.Добавить(СтруктураКоллекции);
			
		ИначеЕсли ИмяМета = "Состав" Тогда
			СтрТипы = "СправочникСсылка,ДокументСсылка"
			+ ",ПеречислениеМенеджер,ОбработкиМенеджер,ОтчетМенеджер"
			+ ",РегистрСведенийМенеджер,РегистрНакопленияМенеджер"
			+ ",РегистрБухгалтерииМенеджер,РегистрРасчетаМенеджер"
			+ ",ПланВидовХарактеристикСсылка,ПланВидовРасчетаМенеджер,ПланСчетовМенеджер"
			+ ",ЗадачиМенеджер,БизнесПроцессМенеджер";
			масТипы = СтрРазделить(СтрТипы, ",");
			
			Для каждого Эл Из Парам.МетаданныеОбъекта.Состав Цикл
				ЭлИмя = Эл.Метаданные.Имя;
				ЭлСиноним = ?(Эл.Метаданные.Синоним = "", Эл.Метаданные.Имя, Эл.Метаданные.Синоним);
				
				ЭлТип = Неопределено;
				Для каждого ИмяТипа из масТипы Цикл
					Попытка
						ЭлТип = Новый ОписаниеТипов(ИмяТипа +"." + ЭлИмя);
						Прервать;
					Исключение
					ЭлТип = Неопределено;
					КонецПопытки;
				КонецЦикла;
				
				СтруктураКоллекции = Новый Структура("Имя, Тип", ЭлСиноним, ЭлТип );
				Коллекция.Добавить(СтруктураКоллекции);
			КонецЦикла;
			
		ИначеЕсли ИмяМета = "Операции" Тогда
			Для каждого Эл Из Парам.МетаданныеОбъекта.Операции Цикл
				ЭлСиноним = ?(Эл.Синоним = "", Эл.Имя, Эл.Синоним);
				ЭлТип = Новый ОписаниеТипов("Строка");
				СтруктураКоллекции = Новый Структура("Имя, Тип", ЭлСиноним, ЭлТип );
				Коллекция.Добавить(СтруктураКоллекции);
			КонецЦикла;

		ИначеЕсли ИмяМета = "Шаблоны" Тогда
			Для каждого Эл Из Парам.МетаданныеОбъекта.ШаблоныURL Цикл
				ЭлСиноним = ?(Эл.Синоним = "", Эл.Имя, Эл.Синоним);
				ЭлТип = Новый ОписаниеТипов("Строка");
				СтруктураКоллекции = Новый Структура("Имя, Тип", ЭлСиноним, ЭлТип );
				Коллекция.Добавить(СтруктураКоллекции);
			КонецЦикла;

		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Неизвестная коллекция " + ИмяМета;
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	Иначе
		Коллекция = Парам.МетаданныеОбъекта[ИмяМета];
	КонецЕсли;
	
	ДополнитьОписаниеЭлементаПоКоллекции(Коллекция, МассивСтрок, Парам); // автоматическое определение типа
		
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СборкаСтроки.Добавить("---" + ИмяМета + "---");
	Для н = 0 По МассивСтрок.ВГраница() Цикл
		СборкаСтроки.Добавить( МассивСтрок[н] );
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрефиксыДанных

&НаСервереБезКонтекста
Функция НовыйТипПрефикс()
	Список = Новый СписокЗначений;
	
	Список.Добавить("Справочник", "Class");    // Зелёная (С)
	Список.Добавить("Документ", "Abstract");   // Голубая (А) 
	Список.Добавить("Отчет", "Protocol");      // Серая (P)
	Список.Добавить("Обработка", "Interface"); // Фиолетовая (I)
	
	Список.Добавить("РегистрСведений", "Entity");    // Зелёная (E)
	Список.Добавить("РегистрБухгалтерии", "Entity"); // Зелёная (E)
	Список.Добавить("РегистрНакопления", "Enum");    // Красная (E)
	Список.Добавить("РегистрРасчета", "Enum");       // Красная (E)
	
	Список.Добавить("ПланОбмена", "Protocol");				// Серая (P)
	Список.Добавить("ПланВидовХарактеристик", "Protocol");	// Серая (P)
	Список.Добавить("ПланСчетов", 			"Protocol");	// Серая (P)
	Список.Добавить("ПланВидовРасчета",		"Protocol");	// Серая (P)
	
	Список.Добавить("Задача", "Annotation");    // Красная (А)
	Список.Добавить("БизнесПроцесс", "Protocol");    // Серая (P)
	
	Список.Добавить("WebСервис", "Interface");    // Фиолетовая (I)
	Список.Добавить("HTTPСервис", "Interface");   // Фиолетовая (I)
	
	Список.Добавить("Перечисление", "Struct", Истина);

	Возврат Список;
КонецФункции

&НаСервере
Процедура ЗаполнитьПрефиксыПоУмолчаниюНаСервере()
	МассивПрефиксов = Новый Массив;
	МассивТипов = Новый Массив;
	
	СписокПрефиксов = НовыйТипПрефикс();
	
	ТаблицаПрефиксов.Очистить();
	Для каждого Эл Из СписокПрефиксов Цикл
		Стр = ТаблицаПрефиксов.Добавить();
		Стр.ТипМетаданных = Эл.Значение;
		Стр.Префикс = Эл.Представление;
		Стр.Пометка = Эл.Пометка;
		
		Если МассивПрефиксов.Найти(Эл.Представление) = Неопределено Тогда
			МассивПрефиксов.Добавить(Эл.Представление);
		КонецЕсли;
		Если МассивТипов.Найти(Эл.Значение) = Неопределено Тогда
			МассивТипов.Добавить(Эл.Значение);
		КонецЕсли;
	КонецЦикла;
	Элементы.ТаблицаПрефиксовПрефикс.СписокВыбора.ЗагрузитьЗначения(МассивПрефиксов);
	Элементы.ТаблицаПрефиксовТипМетаданных.СписокВыбора.ЗагрузитьЗначения(МассивТипов);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрефиксПоУмолчанию(Табл)
	ПрефиксДругие = ""; // пустой = Class (С)
	
	Для каждого Эл Из Табл Цикл
		Если Эл.Пометка Тогда
			ПрефиксДругие = Эл.Префикс;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПрефиксДругие;
КонецФункции

&НаСервере
Функция ПрефиксОбъекта( ИмяТипаМетаданных )
	Табл = ЭтаФорма.ТаблицаПрефиксов;
	Префикс = ПрефиксПоУмолчанию(Табл);

	Строки = Табл.НайтиСтроки( Новый Структура("ТипМетаданных", ИмяТипаМетаданных) );
	Если Строки <> Неопределено И Строки.Количество() > 0 Тогда
		Префикс = Строки[0].Префикс;
	КонецЕсли;
	
	Возврат Префикс;
КонецФункции

#КонецОбласти

#Область Проверка_списков_групп_метаданных

&НаСервереБезКонтекста
Функция ЕстьТабличныеЧастиУОбъекта(ТипМета = "")
	стрИменТиповОбъектовСТЧ = "Справочник,Документ,Обработка"
	// у регистров нет ТЧ
	+ ",ПланОбмена,ПланВидовХарактеристик,ПланСчетов,ПланВидовРасчета"
	+ ",Задача,БизнесПроцесс";
	Возврат ПроверитьВхождениеСтроки(стрИменТиповОбъектовСТЧ, ТипМета);
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьСтандартныеРеквизиты(ТипМета = "")
	стрИменТиповОбъектов = "Справочник,Документ" // у Обработок нет стандартных реквизитов!
	+ ",РегистрСведений,РегистрНакоплений,РегистрБухгалтерии,РегистрРасчета"
	+ ",ПланОбмена,ПланВидовХарактеристик,ПланСчетов,ПланВидовРасчета"
	+ ",Задача,БизнесПроцесс";
	Возврат ПроверитьВхождениеСтроки(стрИменТиповОбъектов, ТипМета);
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьХарактеристики(ТипМета = "")
	стрИменТиповОбъектов =  "Справочник,Документ"
	+ ",ПланОбмена,ПланВидовХарактеристик,ПланСчетов,ПланВидовРасчета"
	+ ",Задача,БизнесПроцесс";
 	Возврат ПроверитьВхождениеСтроки(стрИменТиповОбъектов, ТипМета);
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРегистр( ТипМета = "" )
	
	стрИменТиповРегистров = "РегистрСведений,РегистрНакоплений,РегистрБухгалтерии,РегистрРасчета";
	
	Возврат ПроверитьВхождениеСтроки(стрИменТиповРегистров, ТипМета);
	
КонецФункции

&НаСервереБезКонтекста
Функция НетРеквизитов(ТипМета = "")
	стрИменТипов = "Конфигурация,Общие,Роль,ОбщийМодуль,ПараметрСеанса,WebСервис,HTTPСервис";
	Возврат ПроверитьВхождениеСтроки(стрИменТипов, ТипМета);
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВхождениеСтроки(строкаИмен, ТипМета = "")
	Результат = Ложь;
	
	Если ТипМета = "" Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивОбъектов = СтрРазделить(строкаИмен, ",");
	Для Каждого ИмяОбъекта Из МассивОбъектов Цикл
		Если СтрНайти(ТипМета, ИмяОбъекта) > 0 Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти