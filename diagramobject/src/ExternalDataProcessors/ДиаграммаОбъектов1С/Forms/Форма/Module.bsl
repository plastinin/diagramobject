#Область ПрограммныйИнтерфейс

// Функция - Сгенерированное изображение
//           Формирует на основании текстового описания в формате UML изображение, содержащее UML - диаграмму
//           Формат описания см. https://plantuml.com/ru/
// Параметры:
//  Данные		 - Строка	  -  текстовое описание диаграммы
//  Параметры	 - Структура  -  Параметры доступа к серверу рендеринга ( см. функцию ПараметрыПоУмолчанию)
// 
// Возвращаемое значение:
//  Структура - содержащая
//				ОтветСервера      - HTTPОтвет - Данные, полученные от сервера рендеринга
//				АдресИзображения  - Строка - Адрес во временном хранилище, содержащее данные изображения
//
Функция СгенерированноеИзображение(Данные, Параметры) Экспорт 
	
	ДвоичныеДанныеСтроки = ПолучитьДвоичныеДанныеИзСтроки(Данные);
	СжатыеДанные = СжатыеДанные(ДвоичныеДанныеСтроки);
	Base64Строка = Base64Строка(СжатыеДанные);
	ФорматPlantUML = ФорматPlantUML(Base64Строка);
	Соединение = Новый HTTPСоединение(Параметры.СерверРендеринга, , , , , Параметры.ТаймаутСоединения);
	ТекстЗапроса = РесурсСервера + ФорматPlantUML;
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
	Ответ = Соединение.Получить(Запрос);

	// ответ  не анализируется - при необходимости нужно дописать его анализ
	ДвоичныеДанныеКартинки = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Результат = Новый Структура;
	Результат.Вставить("ОтветСервера", Ответ);
	Результат.Вставить("АдресИзображения", ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки));

	Возврат Результат;

КонецФункции // ()

// Функция - Параметры по умолчанию
//           получает параметры по умолчанию, необходимые для доступа к серверу рендеоинша изображения
// Возвращаемое значение:
// Структура  - содержащая
//				СерверРендеринга    - Строка - адрес сервера, осуществляющего рендеринг
//				РесурсСервера  		- Строка - имя ресурса, ответственного за рендеринг 
//                                    Например для svg изображений это может быть "/plantuml/svg/"
//				ТаймаутСоединения   - число - максимальное время ожидания сервера
//
Функция ПараметрыПоУмолчанию() Экспорт   
	
	Результат = Новый Структура;
	Результат.Вставить("СерверРендеринга", "www.plantuml.com");
	Результат.Вставить("РесурсСервера", "/plantuml/png/");
	Результат.Вставить("ТаймаутСоединения", 180); // сек. = 3 мин.
	Возврат  Результат;

КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сгенерировать(Команда)
	СгенерироватьНаСервере();
КонецПроцедуры

&НаСервере
Процедура СгенерироватьНаСервере()
	
	ПараметрыПоУмолчанию = ПараметрыПоУмолчанию();
	ЗаполнитьЗначенияСвойств(ПараметрыПоУмолчанию, ЭтаФорма);
	Результат = СгенерированноеИзображение(ИсходныйКод, ПараметрыПоУмолчанию);
	
	Если ЗначениеЗаполнено(Результат.АдресИзображения) Тогда
	 	РезультатОбработки = Результат.АдресИзображения;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйТипПрефикс()
	Список = Новый СписокЗначений; // нужна последовательность и 2 значения, у Соответствия или Структуры - нет Индекса!
	
	Список.Добавить("Справочник", "Class");  // Зелёная (С)
	Список.Добавить("Документ", "Abstract"); // Голубая (А) 
	Список.Добавить("Отчет", "Protocol");  // Фиолетовая (I)
	Список.Добавить("Обработка", "Interface");  // Фиолетовая (I)
	
	Список.Добавить("РегистрСведений", "Entity");    // Зелёная (E)
	Список.Добавить("РегистрБухгалтерии", "Entity"); // Зелёная (E)
	Список.Добавить("РегистрНакопления", "Enum");    // Красная (E
	Список.Добавить("РегистрРасчета", "Enum");       // Красная (E
	
	Список.Добавить("ПланВидовХарактеристик", "Struct"); // Серая (S)
	Список.Добавить("ПланВидовРасчета", "Struct"); // Серая (S)
	Список.Добавить("ПланСчетов", "Struct"); // Серая (S)

	Список.Добавить("Задача", "Annotation");    // Красная С
	Список.Добавить("БизнесПроцесс", "Protocol");    // Красная С
	
	Возврат Список;
КонецФункции

&НаСервереБезКонтекста
Функция ТипКласса(ТипМета = "")
	Список = НовыйТипПрефикс();
	Эл = Список.НайтиПоЗначению(ТипМета);
	Если Эл = Неопределено Тогда 
		ЗначТипа = "Protocol";  // Серая (P)
	Иначе
		ЗначТипа = Эл.Представление;
	КонецЕсли;
	Возврат ЗначТипа;
КонецФункции
	
&НаСервере
Процедура СгенерироватьКодНаСервере()

	Если СтандартнаяСхема Тогда
		ИсходныйКодПодключаемойБиблиотеки = "";
	КонецЕсли;
	
	СборкаКода = Новый Массив;
	СборкаКода.Добавить(ИсходныйКодПодключаемойБиблиотеки);
	
	СборкаВзаимосвязей = Новый Массив;

	ВыбранныеОбъектыМетаданных.Очистить();
	ПолучениеДанных();
	
	Для Каждого ЭлементСписка Из ВыбранныеОбъектыМетаданных Цикл
		
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ЭлементСписка.Значение);

		масИмен = СтрРазделить(ЭлементСписка.Значение, "."); 
		ТипМета = масИмен[0];
		Если СтандартнаяСхема Тогда
			Префикс = ТипКласса(ТипМета) + " " + ТипМета + ".";
		Иначе
			Префикс = "_"+ТипМета;
		КонецЕсли;
		СтрокаМетаданные = СформироватьСтрокуМетаданных(Префикс, МетаданныеОбъекта, СтандартнаяСхема);
		
		ДополнитьОписаниемКоллекции(СтрокаМетаданные, МетаданныеОбъекта, СборкаВзаимосвязей,
			ВыбранныеОбъектыМетаданных, ?( ТипМета = "Перечисление", "ЗначенияПеречисления", "Реквизиты") );
 
		СборкаКода.Добавить(СтрокаМетаданные);

	КонецЦикла;
	
	СборкаКода.Добавить(СтрСоединить(СборкаВзаимосвязей, Символы.ПС));
	ИсходныйКод = СтрСоединить(СборкаКода, Символы.ПС);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтметитьПоПодсистемам(Команда)
		
	Оповещение = Новый ОписаниеОповещения("ОповещениеОЗавершенииОтбора", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму("ВнешняяОбработка.ДиаграммаОбъектов1С.Форма.ОтборПоПодсистемам", ПараметрыФормы, ЭтаФорма, 
		УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры
	
&НаКлиенте
Процедура ОповещениеОЗавершенииОтбора(РезультатОтбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатОтбора) <> Тип("СписокЗначений") Тогда 
		Возврат;
	КонецЕсли;
	
	//АдресВыбранныхОбъектов = ПоместитьВоВременноеХранилище(РезультатОтбора, УникальныйИдентификатор);
	//
	ЭлементыВерхнегоУровня = ДеревоОбъектовМетаданных.ПолучитьЭлементы();
	ЭлементыКлассовОбъектовМетаданных = ЭлементыВерхнегоУровня[0].ПолучитьЭлементы();
	
	ОтметитьПоОбъектамРекурсивно(ЭлементыКлассовОбъектовМетаданных, РезультатОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьПоОбъектамРекурсивно(Знач ЭлементыДерева, Знач РезультатОтбора)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ПодчиненныеЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
		
		Если НЕ ЭлементДерева.ЭтоОбъектМетаданных Тогда
			ОтметитьПоОбъектамРекурсивно(ПодчиненныеЭлементыДерева, РезультатОтбора);
		Иначе
			Если РезультатОтбора.НайтиПоЗначению(ЭлементДерева.ПолноеИмя) <> Неопределено Тогда
				ЭлементДерева.Пометка = 1;
				ПометитьЭлементыРодителей(ЭлементДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//---------------------------------------------

&НаКлиенте
Процедура СохранитьКод(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьКодЗавершение", ЭтотОбъект);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = "Выберите Каталог и Имя файла";
	Диалог.ПолноеИмяФайла = "";
	
	Фильтр = "";
	СписокТиповФайлов = "txt,wsd,plantuml,iuml";
	МассивТиповФайлов = СтрРазделить(СписокТиповФайлов, ",");
	Для Каждого ИмяТип из МассивТиповФайлов Цикл
		Фильтр = Фильтр + ВРЕГ(ИмяТип)+"-файл (*." + нрег(ИмяТип)+")|*." + нрег(ИмяТип) + "|";
	КонецЦикла;
	Фильтр = Фильтр + "Все файлы (*.*)|*.*";
	Диалог.Фильтр = Фильтр;
	
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКодЗавершение(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла =  Результат[0];
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст("@StartUML
	|' КодировкаТекста: UTF-8
	| " + ИсходныйКод + "
	|@EndUML");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьКодЗавершениеЗаписи", ЭтотОбъект);
	ТекстДок.НачатьЗапись(ОписаниеОповещения, ИмяФайла, КодировкаТекста.UTF8);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКодЗавершениеЗаписи(УспешноеЗавершение, ДопПараметры = Неопределено) Экспорт
	Если УспешноеЗавершение Тогда
		ТекстСообщения = "Файл успешно сохранен.";
	Иначе
		ТекстСообщения = "Ошибка при записи в файл!";
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
КонецПроцедуры

//---------------------------------------------

&НаКлиенте
Процедура ОткрытьКод(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКодЗавершение", ЭтотОбъект);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите Каталог и Имя файла";
	Диалог.ПолноеИмяФайла = ""; 
	
	Фильтр = "";
	СписокТиповФайлов = "txt,wsd,plantuml,iuml";
	МассивТиповФайлов = СтрРазделить(СписокТиповФайлов, ",");
	Для Каждого ИмяТип из МассивТиповФайлов Цикл
		Фильтр = Фильтр + ВРЕГ(ИмяТип)+"-файл (*." + нрег(ИмяТип)+")|*." + нрег(ИмяТип) + "|";
	КонецЦикла;
	Фильтр = Фильтр + "Все файлы (*.*)|*.*";
	Диалог.Фильтр = Фильтр;
	
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКодЗавершение(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла =  Результат[0];
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяФайла,  КодировкаТекста.UTF8);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьКодЗавершениеЧтения", ЭтотОбъект);
	ТекстДок.НачатьЧтение(ОписаниеОповещения, ИмяФайла, КодировкаТекста.UTF8);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКодЗавершениеЧтения(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат <> Неопределено Тогда
		ИсходныйКод = Результат;
	Иначе
		ТекстСообщения = "Ошибка при чтении файла!";
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФормированиеКодаДиаграммы

&НаСервереБезКонтекста
Функция СформироватьСтрокуМетаданных(Команда, МетаданныеОбъекта, СтандартнаяСхема=Истина)
	Если СтандартнаяСхема Тогда
		Возврат СтрШаблон("%1%2", Команда, МетаданныеОбъекта.Имя);
	Иначе
		Возврат СтрШаблон("%1(%2, ""%3"")", Команда, МетаданныеОбъекта.Имя , МетаданныеОбъекта.Синоним);
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ДополнитьОписаниемКоллекции(СтрокаМетаданные, МетаданныеОбъекта, СборкаВзаимосвязей, ВыбранныеОбъектыМетаданных, ПутьКоллекция = "Реквизиты")
	
	Коллекция = МетаданныеОбъекта[ПутьКоллекция];
	СборкаСтроки = Новый Массив;
	
	Если ФормироватьРеквизитныйСоставОбъектов Тогда
		СборкаСтроки.Добавить(СтрШаблон("%1 {", СтрокаМетаданные));
	КонецЕсли;

	// Временная переменная для упрощения работы с функциями
	ДопПараметры = Новый Структура("МетаданныеОбъекта, СборкаВзаимосвязей, ВыбранныеОбъектыМетаданных, Префикс",
									МетаданныеОбъекта, СборкаВзаимосвязей, ВыбранныеОбъектыМетаданных, "");

	Попытка
		ДопПараметры.Вставить("Префикс", "{static} "); // {static}  - нижнее подчёркивание
		ДополнитьОписаниеЭлементаПоКоллекции(МетаданныеОбъекта.СтандартныеРеквизиты, СборкаСтроки, ДопПараметры);
	Исключение
		Сообщить( СтрокаМетаданные + " нет Стандартных Реквизитов");
	КонецПопытки;

	Если СтрНайти(СтрокаМетаданные, "РегистрСведений.")
		Или СтрНайти(СтрокаМетаданные, "РегистрНакоплений.") 
		Или СтрНайти(СтрокаМетаданные, "РегистрБухгалтерии.") 
		Или СтрНайти(СтрокаМетаданные, "РегистрРасчета.") Тогда  // все регистры одинаково обрабатываем
		
		ДопПараметры.Вставить("Префикс", "");
		
		ДополнитьОписаниеЭлементаРегистра("Измерения", СборкаСтроки, ДопПараметры);
		
		ДополнитьОписаниеЭлементаРегистра("Ресурсы", СборкаСтроки, ДопПараметры);
		
		ДополнитьОписаниеЭлементаРегистра("Реквизиты", СборкаСтроки, ДопПараметры);

	КонецЕсли;
	
	ДополнитьОписаниеЭлементаПоКоллекции(Коллекция, СборкаСтроки, ДопПараметры);
	
	// Есть ТабличныеЧасти
	Если СтрНайти(СтрокаМетаданные, "Справочник.")
		ИЛИ СтрНайти(СтрокаМетаданные, "Документ.")
		ИЛИ СтрНайти(СтрокаМетаданные, "Обработка.") 
		ИЛИ СтрНайти(СтрокаМетаданные, "План")  // любой план
		ИЛИ СтрНайти(СтрокаМетаданные, "Задача.") 
		ИЛИ СтрНайти(СтрокаМетаданные, "БизнесПроцесс.") Тогда
		
		ДопПараметры.Вставить("Префикс", "");
		
		Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			СборкаСтроки.Добавить(СтрШаблон("%1---%2---", Символы.Таб, ТабличнаяЧасть.Имя));
			ДополнитьОписаниеЭлементаПоКоллекции(ТабличнаяЧасть.Реквизиты, СборкаСтроки, ДопПараметры);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ФормироватьРеквизитныйСоставОбъектов Тогда
		СборкаСтроки.Добавить("}");
		СтрокаМетаданные = СтрСоединить(СборкаСтроки, Символы.ПС);
	КонецЕсли;
	
	// Обратное распакопка из структуры ДопПараметров:
	//	МетаданныеОбъекта = не менялись, а 2 других поля - ДА !
	СборкаВзаимосвязей =  ДопПараметры.СборкаВзаимосвязей;
	ВыбранныеОбъектыМетаданных = ДопПараметры.ВыбранныеОбъектыМетаданных;
	
КонецПроцедуры 

// Процедура - Дополнить описание элемента по коллекции
//
// Параметры:
//  Коллекция	 - Структура - коллекция Объектов
//  СборкаСтроки - Массив - массив строк для сборки
//  Парам		 - Структура - {СборкаВзаимосвязей, МетаданныеОбъекта, ВыбранныеОбъектыМетаданных, Префикс}
//
&НаСервере
Процедура ДополнитьОписаниеЭлементаПоКоллекции(Коллекция, СборкаСтроки, Парам)

	Для Каждого Элемент Из Коллекция Цикл

		Попытка
			ТипДанных = Неопределено;
			ТипыЭлта = Элемент.Тип.Типы();
		Исключение
			ТипыЭлта = Новый Массив;
		КонецПопытки;
			
		Префикс2 = "";
		Если ФормироватьРеквизитныйСоставОбъектов Тогда
				Если ТипыЭлта.Количество()=1 Тогда
					ТипДанных = ТипыЭлта[0];
					Префикс2 = ПрефиксПоТипу(ТипДанных);
				КонецЕсли;
			Префикс2 = Префикс2 + Парам.Префикс;
			СборкаСтроки.Добавить(СтрШаблон("%1 %2%3", Символы.Таб, Префикс2, Элемент.Имя));
		КонецЕсли;
		
		Если ТипыЭлта.Количество()=1 и Префикс2 = "-" Или ТипыЭлта.Количество()>1 Тогда
			ДополнитьВзаимосвязи(Элемент.Имя, ТипыЭлта, Парам);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры



// Процедура - Дополнить взаимосвязи
//
// Параметры:
//  Имя			 - Строка - Имя метаданныъ
//  ТипыДанных	 - Массив	 - Массив типов данных
//  Парам		 - Структура - {СборкаВзаимосвязей, МетаданныеОбъекта, ВыбранныеОбъектыМетаданных, Префикс}
//
&НаСервере
Процедура ДополнитьВзаимосвязи(Имя, ТипыДанных, Парам)
	Если Имя = "Ссылка" Или Имя = "Родитель" Тогда
		Возврат; // ссылка на самого-себя не красиво делает петлю - "и так понятно"
	КонецЕсли;
	
	ТипИИмяОбъекта = Парам.МетаданныеОбъекта.ПолноеИмя();  // .Имя() не содержит Тип метаданных
	Для Каждого ТипДанных Из ТипыДанных Цикл
		
		Если НЕ ЭтоСсылка(ТипДанных) Тогда 
			Продолжить;
		КонецЕсли;
		
		МетаданныеСвязи = Метаданные.НайтиПоТипу(ТипДанных);
		Если ВсеПодчиненныеЭлементы  // +++ OS 19.09.2024 поиск всех зависимых элементов
			Или ВыбранныеОбъектыМетаданных.НайтиПоЗначению(МетаданныеСвязи.ПолноеИмя()) <> Неопределено Тогда
			
			ТипИИмяСвязи = МетаданныеСвязи.ПолноеИмя();
			
			Если ФормироватьДетальныеОтношенияНаУровнеРеквизитов Тогда
				Парам.СборкаВзаимосвязей.Добавить(СтрШаблон("%1 --> %2::%3", ТипИИмяСвязи, ТипИИмяОбъекта, Имя));
			Иначе
				Если МетаданныеСвязи.Имя = Парам.МетаданныеОбъекта.Имя Тогда
					Продолжить;
				КонецЕсли;
				СтрокаВзаимосвязь = СтрШаблон("%1 --> %2", ТипИИмяСвязи, ТипИИмяОбъекта);
				Если Парам.СборкаВзаимосвязей.Найти(СтрокаВзаимосвязь) = Неопределено Тогда
					Парам.СборкаВзаимосвязей.Добавить(СтрокаВзаимосвязь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяСхема = Истина;
	
	ЗаполнитьПараметрыПоУмолчанию();
			
	ДеревоОбъектовМетаданныхЗаполнить();
	
	Если РодительскиеПодсистемы.Количество()> 0 Тогда
		Элементы.ДеревоОбъектовМетаданных.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
	
	НачальнаяПометкаКоллекций(ДеревоОбъектовМетаданных);
	
	ОбновитьВидимостьДоступность(ЭтаФорма)

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// Устанавливаем начальное значение выбора.
	Если ИдентификаторТекущейСтрокиПриОткрытии > 0 Тогда
		
		Элементы.ДеревоОбъектовМетаданных.ТекущаяСтрока = ИдентификаторТекущейСтрокиПриОткрытии;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "GenerateCode" Тогда
		СгенерироватьКодНаСервере();
		УдалятьНеСвязанныеОбъектыПриИзменении(Неопределено); // +++ OS
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияШаг3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "GenerateScheme" Тогда 
		СгенерироватьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъектовМетаданных

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)

	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	ПометитьВложенныеЭлементы(ТекущиеДанные);
	ПометитьЭлементыРодителей(ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область УправлениеВидимостью

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьДоступность(Форма)
	
	Объект 			= Форма.Объект;
	ЭлементыФормы 	= Форма.Элементы;
	
	ЭлементыФормы.ФормироватьДетальныеОтношенияНаУровнеРеквизитов.Доступность = Форма.ФормироватьРеквизитныйСоставОбъектов;
	ЭлементыФормы.ВсеПодчиненныеЭлементы.Доступность = Форма.ФормироватьРеквизитныйСоставОбъектов;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции  

Процедура ЗаполнитьПараметрыПоУмолчанию()

	ЗаполнитьИсходникБиблиотекиПоУмолчанию();
	ЗаполнитьНастройкиПоУмолчанию(); 
	ЗаполнитьСписокОбъектовМетаданныхПоУмолчанию();

КонецПроцедуры

Процедура ЗаполнитьИсходникБиблиотекиПоУмолчанию()
	
	Если СтандартнаяСхема Тогда
		Спис = НовыйТипПрефикс();
		ИсходныйКодПодключаемойБиблиотеки = "'---- Типы объектов ----";
		Для каждого Эл из Спис Цикл
		ИсходныйКодПодключаемойБиблиотеки = ИсходныйКодПодключаемойБиблиотеки + Символы.ПС
		+ Эл.Представление +" =" + Эл.Значение;
		КонецЦикла;
		ИсходныйКодПодключаемойБиблиотеки = ИсходныйКодПодключаемойБиблиотеки + Символы.ПС
		+ "Protocol =Все_другие_объекты
		|
		|Protocol =Обозначения_Типов_Данных{
	//см. ПрефиксПоТипу()
		|	-Ссылка // красный квадратик
		|	#Булево // желтый ромбик
		|	~Дата   // синий треугольник
		|	*Число  // черная точка
		|	+Строка // зелёный кружок
		|}
		|";
	Иначе
		ИсходныйКодПодключаемойБиблиотеки = "'>>> библиотека 1ce-icons-for-plantuml (ext)
		|!define v8_PUML https://raw.githubusercontent.com/plastinin/1ce-icons-for-plantuml/extended/dist/
		|!include v8_PUML/common.puml
		|!include v8_PUML/v8_AccRg.puml
		|!include v8_PUML/v8_Document.puml
		|!include v8_PUML/v8_Catalog.puml
		|!include v8_PUML/v8_InfoRg.puml
		|!include v8_PUML/v8_ChartsOfCharacteristicTypes.puml
		|!include v8_PUML/v8_DefinedTypes.puml
		|!include v8_PUML/v8_Enum.puml
		|'<<<
		|";
		Сообщить("Внимание! Проверьте доступ к сайту https://raw.githubusercontent.com");
	КонецЕсли;
	
	ИсходныйКод = ИсходныйКодПодключаемойБиблиотеки;
		
КонецПроцедуры

Процедура ЗаполнитьНастройкиПоУмолчанию()
	
	ПараметрыПоУмолчанию = ПараметрыПоУмолчанию();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыПоУмолчанию);
	
КонецПроцедуры

Процедура ЗаполнитьСписокОбъектовМетаданныхПоУмолчанию()
	
	Если КоллекцияВыбираемыхОбъектовМетаданных.Количество() Тогда
		КоллекцияВыбираемыхОбъектовМетаданных.Очистить();
	КонецЕсли;
	
	мИменаГрупп = ИменаГруппМетаданных();
	Для каждого ИмяГруппы из мИменаГрупп Цикл
		КоллекцияВыбираемыхОбъектовМетаданных.Добавить(ИмяГруппы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаГруппМетаданных()
	стрГруппы = "Справочники,Документы,Отчеты,Обработки,"
	+ "РегистрыНакопления,РегистрыСведений,РегистрыБухгалтерии,РегистрыРасчета,"
	+ "ПланыВидовХарактеристик,ПланыСчетов,ПланыВидовРасчета,"
	+ "Задачи,БизнесПроцессы,"
	+ "Перечисления,ОпределяемыеТипы";
	Возврат СтрРазделить(стрГруппы,",");
КонецФункции

// Функция - Это ссылка
// Проверка того, что переданный тип является ссылочным типом данных.
// Для типа "Неопределено" возвращается Ложь.
//
// Возвращаемое значение:
//  Булево - Да/Нет
//
&НаСервереБезКонтекста
Функция ЭтоСсылка(Тип) Экспорт
	
	Если Тип = Тип("Строка")
		ИЛИ Тип = Тип("Число")
		ИЛИ Тип = Тип("Булево")
		ИЛИ Тип = Тип("Дата")
		ИЛИ Тип = Тип("ОписаниеТипов")
		ИЛИ Тип = Тип("ВидДвиженияНакопления")
		Или Тип = Тип("Неопределено") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокПодсистем(СписокПодсистем) 
	Для Каждого Подсистема Из СписокПодсистем Цикл
		Если Подсистема.ВключатьВКомандныйИнтерфейс Тогда
			ЭлементыПодсистемСКоманднымИнтерфейсом.Добавить(Подсистема.ПолноеИмя());
		КонецЕсли;	
		
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			ЗаполнитьСписокПодсистем(Подсистема.Подсистемы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет дерево значений объектов конфигурации.
// Если список значений "Параметры.КоллекцииВыбираемыхОбъектовМетаданных" не пуст, тогда
// дерево будет ограничено переданным списком коллекций объектов метаданных.
//  Если объекты метаданных в сформированном дереве будут найдены в списке значений
// "Параметры.ВыбранныеОбъектыМетаданных", тогда они будут помечены, как выбранные.
//
&НаСервере
Процедура ДеревоОбъектовМетаданныхЗаполнить()
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ЭтоКоллекцияОбщие");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ПолноеИмя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Родитель");
	
	КоллекцииОбъектовМетаданных_НоваяСтрока("Подсистемы",                   НСтр("ru = 'Подсистемы'"),                     35, 36, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеМодули",                  НСтр("ru = 'Общие модули'"),                   37, 38, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПараметрыСеанса",              НСтр("ru = 'Параметры сеанса'"),               39, 40, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Роли",                         НСтр("ru = 'Роли'"),                           41, 42, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыОбмена",                  НСтр("ru = 'Планы обмена'"),                   43, 44, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("КритерииОтбора",               НСтр("ru = 'Критерии отбора'"),                45, 46, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПодпискиНаСобытия",            НСтр("ru = 'Подписки на события'"),            47, 48, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегламентныеЗадания",          НСтр("ru = 'Регламентные задания'"),           49, 50, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ФункциональныеОпции",          НСтр("ru = 'Функциональные опции'"),           51, 52, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПараметрыФункциональныхОпций", НСтр("ru = 'Параметры функциональных опций'"), 53, 54, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ХранилищаНастроек",            НСтр("ru = 'Хранилища настроек'"),             55, 56, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеФормы",                   НСтр("ru = 'Общие формы'"),                    57, 58, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеКоманды",                 НСтр("ru = 'Общие команды'"),                  59, 60, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ГруппыКоманд",                 НСтр("ru = 'Группы команд'"),                  61, 62, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Интерфейсы",                   НСтр("ru = 'Интерфейсы'"),                     63, 64, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеМакеты",                  НСтр("ru = 'Общие макеты'"),                   65, 66, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеКартинки",                НСтр("ru = 'Общие картинки'"),                 67, 68, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПакетыXDTO",                   НСтр("ru = 'XDTO-пакеты'"),                    69, 70, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("WebСервисы",                   НСтр("ru = 'Web-сервисы'"),                    71, 72, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("WSСсылки",                     НСтр("ru = 'WS-ссылки'"),                      73, 74, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Стили",                        НСтр("ru = 'Стили'"),                          75, 76, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Языки",                        НСтр("ru = 'Языки'"),                          77, 78, Истина, КоллекцииОбъектовМетаданных);
	
	КоллекцииОбъектовМетаданных_НоваяСтрока("Константы",                    НСтр("ru = 'Константы'"),                      БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Справочники",                  НСтр("ru = 'Справочники'"),                    БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Документы",                    НСтр("ru = 'Документы'"),                      БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ЖурналыДокументов",            НСтр("ru = 'Журналы документов'"),             БиблиотекаКартинок.ЖурналДокументов,       БиблиотекаКартинок.ЖурналДокументов,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Перечисления",                 НСтр("ru = 'Перечисления'"),                   БиблиотекаКартинок.Перечисление,           БиблиотекаКартинок.Перечисление,                 Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Отчеты",                       НСтр("ru = 'Отчеты'"),                         БиблиотекаКартинок.Отчет,                  БиблиотекаКартинок.Отчет,                        Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Обработки",                    НСтр("ru = 'Обработки'"),                      БиблиотекаКартинок.Обработка,              БиблиотекаКартинок.Обработка,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовХарактеристик",      НСтр("ru = 'Планы видов характеристик'"),      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыСчетов",                  НСтр("ru = 'Планы счетов'"),                   БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовРасчета",            НСтр("ru = 'Планы видов характеристик'"),      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыСведений",             НСтр("ru = 'Регистры сведений'"),              БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыНакопления",           НСтр("ru = 'Регистры накопления'"),            БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыБухгалтерии",          НСтр("ru = 'Регистры бухгалтерии'"),           БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыРасчета",              НСтр("ru = 'Регистры расчета'"),               БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("БизнесПроцессы",               НСтр("ru = 'Бизнес-процессы'"),                БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Задачи",                       НСтр("ru = 'Задачи'"),                         БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 Ложь, КоллекцииОбъектовМетаданных);
		
	// Создание предопределенных элементов.
	ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя = Метаданные.Имя;
	ПараметрыЭлемента.Синоним = Метаданные.Синоним;
	ПараметрыЭлемента.Картинка = 79;
	ПараметрыЭлемента.Родитель = ДеревоОбъектовМетаданных;
	ЭлементКонфигурация = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя = "Общие";
	ПараметрыЭлемента.Синоним = "Общие";
	ПараметрыЭлемента.Картинка = 0;
	ПараметрыЭлемента.Родитель = ЭлементКонфигурация;
	ЭлементОбщие = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	// Заполнение дерева объектов метаданных.
	Для Каждого Строка Из КоллекцииОбъектовМетаданных Цикл
		Если КоллекцияВыбираемыхОбъектовМетаданных.Количество() = 0
			Или КоллекцияВыбираемыхОбъектовМетаданных.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			Строка.Родитель = ?(Строка.ЭтоКоллекцияОбщие, ЭлементОбщие, ЭлементКонфигурация);
			ДобавитьЭлементДереваОбъектовМетаданных(Строка, ?(Строка.Имя = "Подсистемы", Метаданные.Подсистемы, Неопределено));
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОбщие.ПолучитьЭлементы().Количество() = 0 Тогда
		ЭлементКонфигурация.ПолучитьЭлементы().Удалить(ЭлементОбщие);
	КонецЕсли;
	
КонецПроцедуры 

// Возвращает новую структуру параметров элемента дерева объектов метаданных.
//
// Возвращаемое значение:
//   Структура с полями:
//     Имя           - Строка - имя родительского элемента.
//     Синоним       - Строка - синоним родительского элемента.
//     Пометка       - Булево - начальная пометка коллекции или объекта метаданных.
//     Картинка      - Число - код картинки родительского элемента.
//     КартинкаОбъекта - Число - код картинки подэлемента.
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента.
//
Функция ПараметрыЭлементаДереваОбъектовМетаданных()
	
	Возврат Новый Структура("Имя,ПолноеИмя,Синоним,Пометка,Картинка,КартинкаОбъекта,Родитель", "", "", Ложь, 0, 0, Неопределено);
	
КонецФункции

// Добавляет новую строку в дерево значений формы (дерево),
// а также заполняет полный набор строк из метаданных по переданному параметру.
//
// Если параметр Подсистемы заполнен, то вызывается рекурсивно для всех дочерних подсистем.
//
// Параметры:
//   ПараметрыЭлемента - Структура с полями:
//     Имя           - Строка - имя родительского элемента.
//     Синоним       - Строка - синоним родительского элемента.
//     Пометка       - Булево - начальная пометка коллекции или объекта метаданных.
//     Картинка      - Число - код картинки родительского элемента.
//     КартинкаОбъекта - Число - код картинки подэлемента.
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента.
//   Подсистемы      - если заполнен, то содержит значение Метаданные.Подсистемы (коллекцию элементов).
//   Проверять       - Булево - признак проверки на принадлежность родительским подсистемам.
// 
// Возвращаемое значение:
// 
//   Строка дерева объектов метаданных.
//
&НаСервере
Функция ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, Подсистемы = Неопределено, Проверять = Истина)
	
	// Проверка на наличие командного интерфейса только в листьях дерева.
	Если Подсистемы <> Неопределено  И Параметры.Свойство("ТолькоПодсистемыСКИ") 
		И Не ПустаяСтрока(ПараметрыЭлемента.ПолноеИмя) 
		И ЭлементыПодсистемСКоманднымИнтерфейсом.НайтиПоЗначению(ПараметрыЭлемента.ПолноеИмя) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Подсистемы = Неопределено Тогда
		
		Если Метаданные[ПараметрыЭлемента.Имя].Количество() = 0 Тогда
			// Если нет ни одного объекта метаданных из нужной ветки. 
			// Например, нет ни одного регистра бухгалтерии,
			// то корень "Регистры бухгалтерии" добавлять не нужно.
			Возврат Неопределено;
		КонецЕсли;
		
		НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
		
		Для Каждого ЭлементКоллекцииМетаданных Из Метаданные[ПараметрыЭлемента.Имя] Цикл
			ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
//			ПараметрыЭлемента.КартинкаОбъекта = ПараметрыЭлемента.КартинкаОбъекта;
			ПараметрыЭлемента.Родитель = НоваяСтрока;
			НоваяСтрокаДерева(ПараметрыЭлемента, Истина);
		КонецЦикла;
		
		Возврат НоваяСтрока;
		
	КонецЕсли;
	
	Если Подсистемы.Количество() = 0 И ПараметрыЭлемента.Имя = "Подсистемы" Тогда
		// Если нет ни одной подсистемы, то корень "Подсистемы" добавлять не нужно.
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
	
	Для Каждого ЭлементКоллекцииМетаданных Из Подсистемы Цикл
		
		Если Не Проверять
			Или Параметры.РодительскиеПодсистемы.Количество() = 0
			Или Параметры.РодительскиеПодсистемы.НайтиПоЗначению(ЭлементКоллекцииМетаданных.Имя) <> Неопределено Тогда
			
			ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
		// BugFix
			ПараметрыЭлемента.Картинка 		  = ЭлементКоллекцииМетаданных.Картинка;
			ПараметрыЭлемента.КартинкаОбъекта = ЭлементКоллекцииМетаданных.КартинкаОбъекта;
			ПараметрыЭлемента.Родитель = НоваяСтрока;
			ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, ЭлементКоллекцииМетаданных.Подсистемы, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция НоваяСтрокаДерева(ПараметрыСтроки, ЭтоОбъектМетаданных = Ложь)
	
	Коллекция = ПараметрыСтроки.Родитель.ПолучитьЭлементы();
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Имя                 = ПараметрыСтроки.Имя;
	НоваяСтрока.Представление       = ?(ЗначениеЗаполнено(ПараметрыСтроки.Синоним), ПараметрыСтроки.Синоним, ПараметрыСтроки.Имя);
	НоваяСтрока.Пометка             = ?(ВыбранныеОбъектыМетаданных.НайтиПоЗначению(ПараметрыСтроки.ПолноеИмя) = Неопределено, 0, 1);
	НоваяСтрока.Картинка            = ПараметрыСтроки.Картинка;
	НоваяСтрока.ПолноеИмя           = ПараметрыСтроки.ПолноеИмя;
	НоваяСтрока.ЭтоОбъектМетаданных = ЭтоОбъектМетаданных;
	
	Если НоваяСтрока.ЭтоОбъектМетаданных 
		И НоваяСтрока.ПолноеИмя = НачальноеЗначениеВыбора Тогда
		ИдентификаторТекущейСтрокиПриОткрытии = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет новую строку в таблицу значений видов объектов метаданных
// конфигурации.
//
// Параметры:
// Имя           - имя объекта метаданных или вида объекта метаданных.
// Синоним       - синоним объекта метаданных.
// Картинка      - картинка поставленная в соответствие объекту метаданных
//                 или виду объекта метаданных.
// ЭтоКоллекцияОбщие - признак того, что текущий элемент содержит подэлементы.
//
&НаСервере
Процедура КоллекцииОбъектовМетаданных_НоваяСтрока(Имя, Синоним, Картинка, КартинкаОбъекта, ЭтоКоллекцияОбщие, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	НоваяСтрока.ЭтоКоллекцияОбщие = ЭтоКоллекцияОбщие;
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для родителей передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьЭлементыРодителей(Элемент)
	
	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = Родитель.ПолучитьИдентификатор();
	Элементы.ДеревоОбъектовМетаданных.Развернуть(ИдентификаторСтроки);
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Элемент.Пометка = 2 Тогда
		Родитель.Пометка = 2;
	Иначе
		Родитель.Пометка = ЗначениеПометкиЭлементов(ЭлементыРодителя);
	КонецЕсли;
	
	ПометитьЭлементыРодителей(Родитель);
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПометкиЭлементов(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементов(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПомеченные Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПометитьЭлементыРодителейНаСервере(Элемент)
	
	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Элемент.Пометка = 2 Тогда
		Родитель.Пометка = 2;
	Иначе
		Родитель.Пометка = ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя);
	КонецЕсли;
	
	ПометитьЭлементыРодителейНаСервере(Родитель);
	
КонецПроцедуры

&НаСервере
Функция ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементовНаСервере(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЕстьПомеченные И ЕстьНепомеченные, 2, ?(ЕстьПомеченные, 1, 0));
	
КонецФункции

// Процедура НачальнаяПометкаКоллекций устанавливает пометку для коллекций
// объектов метаданных, которые не имеют объектов метаданных (истина) и 
// которые имеют объекты метаданных с заданной пометкой.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
Процедура НачальнаяПометкаКоллекций(Родитель)
	
	ВложенныеЭлементы = Родитель.ПолучитьЭлементы();
	
	Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		Если ВложенныйЭлемент.Пометка Тогда
			ПометитьЭлементыРодителейНаСервере(ВложенныйЭлемент);
		КонецЕсли;
		НачальнаяПометкаКоллекций(ВложенныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для вложенных элементов начиная
// с передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьВложенныеЭлементы(Элемент)
	
	ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
	
	Если ВложенныеЭлементы.Количество() = 0 Тогда
		Если Не Элемент.ЭтоОбъектМетаданных Тогда
			Элемент.Пометка = 0;
		КонецЕсли;
	Иначе
		Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
			ВложенныйЭлемент.Пометка = Элемент.Пометка;
			ПометитьВложенныеЭлементы(ВложенныйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура для заполнения списка выбранных элементов дерева.
// Рекурсивно просматривает все дерево элементов и в случае, если элемент
// выбран добавляет его ПолноеИмя в список выбранных.
//
// Родитель      - ДанныеФормыЭлементДерева
//
&НаСервере
Процедура ПолучениеДанных(Родитель = Неопределено)
	
	Родитель = ?(Родитель = Неопределено, ДеревоОбъектовМетаданных, Родитель);
	
	КоллекцияЭлементов = Родитель.ПолучитьЭлементы();
	
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		Если Элемент.Пометка = 1 И Не ПустаяСтрока(Элемент.ПолноеИмя) Тогда
			ВыбранныеОбъектыМетаданных.Добавить(Элемент.ПолноеИмя);
		КонецЕсли;
		ПолучениеДанных(Элемент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КодированиеДанных

Функция GZipРазмерHeader()

	Возврат 10;

КонецФункции

Функция GZipРазмерFooter()

	Возврат 8;

КонецФункции

Функция ЗаписатьZip(Данные)

#Если МобильноеПриложениеСервер Тогда
	ВызватьИсключение(НСтр("ru = 'Работа с Zip-файлами в мобильной платформе не поддерживается'"));
#Иначе
	ВременныйФайл = ПолучитьИмяВременногоФайла(".bin");
	Данные.Записать(ВременныйФайл);
	ПотокZip = Новый ПотокВПамяти;
	ЗаписьZip = Новый ЗаписьZipФайла(ПотокZip);
	ЗаписьZip.Добавить(ВременныйФайл);
	ЗаписьZip.Записать();
	УдалитьФайлы(ВременныйФайл);

	Возврат ПотокZip.ЗакрытьИПолучитьДвоичныеДанные();
#КонецЕсли

КонецФункции

Функция СжатыеДанные(Данные) 

	ЧтениеДанных = Новый ЧтениеДанных(ЗаписатьZip(Данные));

	НачальноеСмещение = 14;
	ЧтениеДанных.Пропустить(НачальноеСмещение);
	CRC32 = ЧтениеДанных.ПрочитатьЦелое32();

	РазмерСжатыхДанных = ЧтениеДанных.ПрочитатьЦелое32();
	РазмерИсходныхДанных = ЧтениеДанных.ПрочитатьЦелое32();

	РазмерИмениФайла = ЧтениеДанных.ПрочитатьЦелое16();
	РазмерДополнительногоПоля = ЧтениеДанных.ПрочитатьЦелое16();
	ЧтениеДанных.Пропустить(РазмерИмениФайла + РазмерДополнительногоПоля);

	ПотокGZip = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(ПотокGZip);
	ЧтениеДанных.КопироватьВ(ЗаписьДанных, РазмерСжатыхДанных);
	
	Возврат ПотокGZip.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции

Функция ФорматPlantUML(Данные) 
	
	Результат = "";
	СтрокаИскомая	  = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	СтрокаПодстановки = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_"; 
	Для Счетчик = 0 По СтрДлина(Данные) - 1 Цикл     
		ТекСимвол = Сред(Данные, счетчик + 1, 1);
		Поз = СтрНайти(СтрокаИскомая, ТекСимвол); 
		Если ТекСимвол = Символы.ПС ИЛИ ТекСимвол = Символы.ВК Тогда
		   Продолжить;
		КонецЕсли;
		Если Поз > 0  Тогда
			Результат = Результат + Сред(СтрокаПодстановки, Поз, 1);
		Иначе
			Результат = Результат + ТекСимвол; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;   
	
КонецФункции 

#КонецОбласти    

#Область ИменаТипов

// Возвращает имя базового типа по переданному значению объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип.
// 
// Возвращаемое значение:
//  Строка - имя базового типа по переданному значению объекта метаданных.
//
Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаДокументы();
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаСправочники();
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПеречисления();
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыСведений();
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыНакопления();
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыБухгалтерии();
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыРасчета();
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыОбмена();
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовХарактеристик();
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаБизнесПроцессы();
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЗадачи();
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыСчетов();
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовРасчета();
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаКонстанты();
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЖурналыДокументов();
		
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПоследовательности();
		
	ИначеЕсли Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегламентныеЗадания();
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры сведений".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаРегистрыСведений() Экспорт
	
	Возврат "РегистрыСведений";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры накопления".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаРегистрыНакопления() Экспорт
	
	Возврат "РегистрыНакопления";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры бухгалтерии".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаРегистрыБухгалтерии() Экспорт
	
	Возврат "РегистрыБухгалтерии";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры расчета".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаРегистрыРасчета() Экспорт
	
	Возврат "РегистрыРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Документы".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаДокументы() Экспорт
	
	Возврат "Документы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Справочники".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаСправочники() Экспорт
	
	Возврат "Справочники";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Перечисления".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПеречисления() Экспорт
	
	Возврат "Перечисления";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Отчеты".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаОтчеты() Экспорт
	
	Возврат "Отчеты";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Обработки".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаОбработки() Экспорт
	
	Возврат "Обработки";
	
КонецФункции

// Возвращает значение для идентификации общего типа "ПланыОбмена".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПланыОбмена() Экспорт
	
	Возврат "ПланыОбмена";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов характеристик".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПланыВидовХарактеристик() Экспорт
	
	Возврат "ПланыВидовХарактеристик";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Бизнес-процессы".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаБизнесПроцессы() Экспорт
	
	Возврат "БизнесПроцессы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Задачи".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаЗадачи() Экспорт
	
	Возврат "Задачи";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы счетов".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПланыСчетов() Экспорт
	
	Возврат "ПланыСчетов";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов расчета".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПланыВидовРасчета() Экспорт
	
	Возврат "ПланыВидовРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Константы".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаКонстанты() Экспорт
	
	Возврат "Константы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Журналы документов".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаЖурналыДокументов() Экспорт
	
	Возврат "ЖурналыДокументов";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Последовательности".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПоследовательности() Экспорт
	
	Возврат "Последовательности";
	
КонецФункции

// Возвращает значение для идентификации общего типа "РегламентныеЗадания".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаРегламентныеЗадания() Экспорт
	
	Возврат "РегламентныеЗадания";
	
КонецФункции

&НаКлиенте
Процедура ФормироватьРеквизитныйСоставОбъектовПриИзменении(Элемент)

	ОбновитьВидимостьДоступность(ЭтаФорма);
	Если НЕ ФормироватьРеквизитныйСоставОбъектов Тогда
		ФормироватьДетальныеОтношенияНаУровнеРеквизитов = Ложь;
		ВсеПодчиненныеЭлементы = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьНеСвязанныеОбъектыПриИзменении(Элемент)
	Если УдалятьНеСвязанныеОбъекты Тогда
		ИсходныйКод = ИсходныйКод +"
		|remove @unlinked";
	Иначе
		ИсходныйКод = СтрЗаменить(ИсходныйКод,"remove @unlinked", "");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтандартнаяСхемаПриИзменении(Элемент)
	ЗаполнитьПараметрыПоУмолчанию()
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрефиксПоТипу(ТипДанных)
	Если ЭтоСсылка(ТипДанных) Тогда Префикс = "-" // красный квадратик
	ИначеЕсли ТипДанных = Тип("Булево") Тогда Префикс = "#" // желтый ромбик(выбор)
	ИначеЕсли ТипДанных = Тип("Дата") Тогда Префикс = "~"   // чсиний треугольник (
	ИначеЕсли ТипДанных = Тип("Число") Тогда Префикс = "*"  // черная точка
	ИначеЕсли ТипДанных = Тип("Строка") Тогда Префикс = "+" // зелёный кружок
	Иначе Префикс = ""
	КонецЕсли;
	Возврат Префикс
КонецФункции

&НаСервере
Процедура ДополнитьОписаниеЭлементаРегистра(ИмяМета = "Ресурсы", СборкаСтроки, Парам)
	МасСтрок = Новый Массив;
	
	ДополнитьОписаниеЭлементаПоКоллекции(Парам.МетаданныеОбъекта[ИмяМета], МасСтрок, Парам); // автоматическое определение типа
		
	Если МасСтрок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	СборкаСтроки.Добавить("---" + ИмяМета + "---");
	Для н=0 по МасСтрок.ВГраница() Цикл
		СборкаСтроки.Добавить( МасСтрок[н] )
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти


